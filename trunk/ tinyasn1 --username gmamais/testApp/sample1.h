#ifndef _INC_SAMPLE1_H
#define _INC_SAMPLE1_H
/*
Code automatically generated by asn1cc tool
*/

#include "asn1crt.h"

#ifdef  __cplusplus
extern "C" {
#endif

typedef asn1SccSint  MyInt;

#define MyInt_REQUIRED_BYTES_FOR_ENCODING		1

#define ERR_MyInt		1000 /* (2..20) */

void MyInt_Initialize(MyInt* pVal);
flag MyInt_IsConstraintValid(const MyInt* val, int* pErrCode);
flag MyInt_Encode(const MyInt* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag MyInt_Decode(MyInt* pVal, BitStream* pBitStrm, int* pErrCode);


typedef MyInt MyInt2;

#define MyInt2_REQUIRED_BYTES_FOR_ENCODING		1

#define ERR_MyInt2		1001 /* (4<..15)(2..20) */

void MyInt2_Initialize(MyInt2* pVal);
flag MyInt2_IsConstraintValid(const MyInt2* val, int* pErrCode);
flag MyInt2_Encode(const MyInt2* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag MyInt2_Decode(MyInt2* pVal, BitStream* pBitStrm, int* pErrCode);


typedef asn1SccSint  MyInt3;

#define MyInt3_REQUIRED_BYTES_FOR_ENCODING		9

#define ERR_MyInt3		1002 /* (ALL EXCEPT ((4 | 5))) */

void MyInt3_Initialize(MyInt3* pVal);
flag MyInt3_IsConstraintValid(const MyInt3* val, int* pErrCode);
flag MyInt3_Encode(const MyInt3* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag MyInt3_Decode(MyInt3* pVal, BitStream* pBitStrm, int* pErrCode);


typedef enum {
    MyEnum_red = 0,
    MyEnum_green = 1,
    MyEnum_blue = 2
} MyEnum;

#define MyEnum_REQUIRED_BYTES_FOR_ENCODING		1

#define ERR_MyEnum		1003 /* ((green(1) | blue(2))) */

void MyEnum_Initialize(MyEnum* pVal);
flag MyEnum_IsConstraintValid(const MyEnum* val, int* pErrCode);
flag MyEnum_Encode(const MyEnum* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag MyEnum_Decode(MyEnum* pVal, BitStream* pBitStrm, int* pErrCode);


typedef enum {
    MyEnum2_red = 0,
    MyEnum2_green = 1,
    MyEnum2_blue = 2
} MyEnum2;

#define MyEnum2_REQUIRED_BYTES_FOR_ENCODING		1


void MyEnum2_Initialize(MyEnum2* pVal);
flag MyEnum2_IsConstraintValid(const MyEnum2* val, int* pErrCode);
flag MyEnum2_Encode(const MyEnum2* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag MyEnum2_Decode(MyEnum2* pVal, BitStream* pBitStrm, int* pErrCode);


typedef struct {
    MyInt2 a;
    MyInt2 b;
    MyEnum c;
    struct {
            long nCount; /*Number of bits in the array. Max value is : 10 */
            byte arr[2];
        } d;
    struct {
        unsigned int b:1;
        unsigned int c:1;
        unsigned int d:1;
    } exist;
} MyStruct;

#define MyStruct_REQUIRED_BYTES_FOR_ENCODING		4

#define ERR_MyStruct_a		1004 /* (10..15)(4<..15)(2..20) */
#define ERR_MyStruct_b		1005 /* (4<..15)(2..20) */
#define ERR_MyStruct_c		1006 /* ((green(1) | blue(2))) */
#define ERR_MyStruct_d		1007 /* (SIZE (1..10))('0100'B) */

void MyStruct_Initialize(MyStruct* pVal);
flag MyStruct_IsConstraintValid(const MyStruct* val, int* pErrCode);
flag MyStruct_Encode(const MyStruct* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag MyStruct_Decode(MyStruct* pVal, BitStream* pBitStrm, int* pErrCode);


#ifdef  __cplusplus
}
#define	ENUM_MyEnum_red	MyEnum_red
#define	ENUM_MyEnum_green	MyEnum_green
#define	ENUM_MyEnum_blue	MyEnum_blue
#define	ENUM_MyEnum2_red	MyEnum2_red
#define	ENUM_MyEnum2_green	MyEnum2_green
#define	ENUM_MyEnum2_blue	MyEnum2_blue
#endif

#endif
