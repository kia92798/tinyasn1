#ifndef _INC_SAMPLE1_H
#define _INC_SAMPLE1_H
/*
Code automatically generated by asn1cc tool
*/

#include "asn1crt.h"

#ifdef  __cplusplus
extern "C" {
#endif

typedef flag  asn1MYBOOL;

#define asn1MYBOOL_REQUIRED_BYTES_FOR_ENCODING		1


void asn1MYBOOL_Initialize(asn1MYBOOL* pVal);
flag asn1MYBOOL_IsConstraintValid(asn1MYBOOL* val, int* pErrCode);
flag asn1MYBOOL_Encode(asn1MYBOOL* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1MYBOOL_Decode(asn1MYBOOL* val, BitStream* pBitStrm, int* pErrCode);


typedef asn1SccSint  asn1T_INTEGER;

#define asn1T_INTEGER_REQUIRED_BYTES_FOR_ENCODING		2

#define ERR_asn1T_INTEGER		1000 /* (-1000..1000) */

void asn1T_INTEGER_Initialize(asn1T_INTEGER* pVal);
flag asn1T_INTEGER_IsConstraintValid(asn1T_INTEGER* val, int* pErrCode);
flag asn1T_INTEGER_Encode(asn1T_INTEGER* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1T_INTEGER_Decode(asn1T_INTEGER* val, BitStream* pBitStrm, int* pErrCode);


typedef double asn1T_REAL;

#define asn1T_REAL_REQUIRED_BYTES_FOR_ENCODING		12

#define ERR_asn1T_REAL		1001 /* (-10000..10000) */

void asn1T_REAL_Initialize(asn1T_REAL* pVal);
flag asn1T_REAL_IsConstraintValid(asn1T_REAL* val, int* pErrCode);
flag asn1T_REAL_Encode(asn1T_REAL* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1T_REAL_Decode(asn1T_REAL* val, BitStream* pBitStrm, int* pErrCode);


typedef struct {
    long nCount;
    asn1T_REAL arr[3];
} asn1T_ACCELERATION;

#define asn1T_ACCELERATION_REQUIRED_BYTES_FOR_ENCODING		36

#define ERR_asn1T_ACCELERATION		1002 /* (SIZE (3)) */
#define ERR_asn1T_ACCELERATION_elem		1003 /* (-10000..10000) */

void asn1T_ACCELERATION_Initialize(asn1T_ACCELERATION* pVal);
flag asn1T_ACCELERATION_IsConstraintValid(asn1T_ACCELERATION* val, int* pErrCode);
flag asn1T_ACCELERATION_Encode(asn1T_ACCELERATION* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1T_ACCELERATION_Decode(asn1T_ACCELERATION* val, BitStream* pBitStrm, int* pErrCode);


typedef struct {
    flag  set_acs1_cmd;
    flag  set_acs2_cmd;
} asn1T_ACS_CMD;

#define asn1T_ACS_CMD_REQUIRED_BYTES_FOR_ENCODING		1


void asn1T_ACS_CMD_Initialize(asn1T_ACS_CMD* pVal);
flag asn1T_ACS_CMD_IsConstraintValid(asn1T_ACS_CMD* val, int* pErrCode);
flag asn1T_ACS_CMD_Encode(asn1T_ACS_CMD* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1T_ACS_CMD_Decode(asn1T_ACS_CMD* val, BitStream* pBitStrm, int* pErrCode);


typedef asn1T_REAL asn1T_ANGLE;

#define asn1T_ANGLE_REQUIRED_BYTES_FOR_ENCODING		12

#define ERR_asn1T_ANGLE		1004 /* (-10000..10000) */

void asn1T_ANGLE_Initialize(asn1T_ANGLE* pVal);
flag asn1T_ANGLE_IsConstraintValid(asn1T_ANGLE* val, int* pErrCode);
flag asn1T_ANGLE_Encode(asn1T_ANGLE* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1T_ANGLE_Decode(asn1T_ANGLE* val, BitStream* pBitStrm, int* pErrCode);


typedef struct {
    asn1T_INTEGER p_rate;
    asn1T_INTEGER q_rate;
    asn1T_INTEGER r_rate;
} asn1T_ANGULAR_RATE;

#define asn1T_ANGULAR_RATE_REQUIRED_BYTES_FOR_ENCODING		5

#define ERR_asn1T_ANGULAR_RATE_p_rate		1005 /* (-1000..1000) */
#define ERR_asn1T_ANGULAR_RATE_q_rate		1006 /* (-1000..1000) */
#define ERR_asn1T_ANGULAR_RATE_r_rate		1007 /* (-1000..1000) */

void asn1T_ANGULAR_RATE_Initialize(asn1T_ANGULAR_RATE* pVal);
flag asn1T_ANGULAR_RATE_IsConstraintValid(asn1T_ANGULAR_RATE* val, int* pErrCode);
flag asn1T_ANGULAR_RATE_Encode(asn1T_ANGULAR_RATE* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1T_ANGULAR_RATE_Decode(asn1T_ANGULAR_RATE* val, BitStream* pBitStrm, int* pErrCode);


typedef struct {
    struct {
        long nCount;
        flag  arr[4];
    } cm_statuses;
    asn1T_INTEGER acm_status;
    asn1T_INTEGER tgm_status;
    asn1T_INTEGER mcm_phase;
    asn1T_INTEGER obm_mode;
    struct {
        long nCount;
        asn1T_INTEGER arr[2];
    } alarm_counters;
    struct {
        long nCount;
        asn1T_INTEGER arr[6];
    } internal_rates;
    asn1T_REAL radial_velocity;
    asn1T_REAL longitudinal_velocity;
} asn1T_CM_TELEMETRY;

#define asn1T_CM_TELEMETRY_REQUIRED_BYTES_FOR_ENCODING		41

#define ERR_asn1T_CM_TELEMETRY_cm_statuses		1008 /* (SIZE (4)) */
#define ERR_asn1T_CM_TELEMETRY_acm_status		1009 /* (-1000..1000) */
#define ERR_asn1T_CM_TELEMETRY_tgm_status		1010 /* (-1000..1000) */
#define ERR_asn1T_CM_TELEMETRY_mcm_phase		1011 /* (-1000..1000) */
#define ERR_asn1T_CM_TELEMETRY_obm_mode		1012 /* (-1000..1000) */
#define ERR_asn1T_CM_TELEMETRY_alarm_counters		1013 /* (SIZE (2)) */
#define ERR_asn1T_CM_TELEMETRY_alarm_counters_elem		1014 /* (-1000..1000) */
#define ERR_asn1T_CM_TELEMETRY_internal_rates		1015 /* (SIZE (6)) */
#define ERR_asn1T_CM_TELEMETRY_internal_rates_elem		1016 /* (-1000..1000) */
#define ERR_asn1T_CM_TELEMETRY_radial_velocity		1017 /* (-10000..10000) */
#define ERR_asn1T_CM_TELEMETRY_longitudinal_velocity		1018 /* (-10000..10000) */

void asn1T_CM_TELEMETRY_Initialize(asn1T_CM_TELEMETRY* pVal);
flag asn1T_CM_TELEMETRY_IsConstraintValid(asn1T_CM_TELEMETRY* val, int* pErrCode);
flag asn1T_CM_TELEMETRY_Encode(asn1T_CM_TELEMETRY* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1T_CM_TELEMETRY_Decode(asn1T_CM_TELEMETRY* val, BitStream* pBitStrm, int* pErrCode);


typedef struct {
    flag  pde1_pde4_config_is_selected;
    flag  pde1_is_available;
    flag  pde2_is_available;
    flag  pde3_is_available;
    flag  pde4_is_available;
    flag  dpu_reset_is_requested;
    asn1T_INTEGER cam_duration;
    flag  cam_boost_only_is_requested;
    flag  halt_mode_is_requested;
} asn1T_CONFIGURATION_TABLE;

#define asn1T_CONFIGURATION_TABLE_REQUIRED_BYTES_FOR_ENCODING		3

#define ERR_asn1T_CONFIGURATION_TABLE_cam_duration		1019 /* (-1000..1000) */

void asn1T_CONFIGURATION_TABLE_Initialize(asn1T_CONFIGURATION_TABLE* pVal);
flag asn1T_CONFIGURATION_TABLE_IsConstraintValid(asn1T_CONFIGURATION_TABLE* val, int* pErrCode);
flag asn1T_CONFIGURATION_TABLE_Encode(asn1T_CONFIGURATION_TABLE* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1T_CONFIGURATION_TABLE_Decode(asn1T_CONFIGURATION_TABLE* val, BitStream* pBitStrm, int* pErrCode);


typedef struct {
    long nCount;
    asn1T_REAL arr[3];
} asn1T_CONTROLLER_SATURATION_LEVEL;

#define asn1T_CONTROLLER_SATURATION_LEVEL_REQUIRED_BYTES_FOR_ENCODING		36

#define ERR_asn1T_CONTROLLER_SATURATION_LEVEL		1020 /* (SIZE (3)) */
#define ERR_asn1T_CONTROLLER_SATURATION_LEVEL_elem		1021 /* (-10000..10000) */

void asn1T_CONTROLLER_SATURATION_LEVEL_Initialize(asn1T_CONTROLLER_SATURATION_LEVEL* pVal);
flag asn1T_CONTROLLER_SATURATION_LEVEL_IsConstraintValid(asn1T_CONTROLLER_SATURATION_LEVEL* val, int* pErrCode);
flag asn1T_CONTROLLER_SATURATION_LEVEL_Encode(asn1T_CONTROLLER_SATURATION_LEVEL* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1T_CONTROLLER_SATURATION_LEVEL_Decode(asn1T_CONTROLLER_SATURATION_LEVEL* val, BitStream* pBitStrm, int* pErrCode);


typedef struct {
    asn1T_REAL k1;
    asn1T_REAL k2;
} asn1T_CONTROL_GAINS;

#define asn1T_CONTROL_GAINS_REQUIRED_BYTES_FOR_ENCODING		24

#define ERR_asn1T_CONTROL_GAINS_k1		1022 /* (-10000..10000) */
#define ERR_asn1T_CONTROL_GAINS_k2		1023 /* (-10000..10000) */

void asn1T_CONTROL_GAINS_Initialize(asn1T_CONTROL_GAINS* pVal);
flag asn1T_CONTROL_GAINS_IsConstraintValid(asn1T_CONTROL_GAINS* val, int* pErrCode);
flag asn1T_CONTROL_GAINS_Encode(asn1T_CONTROL_GAINS* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1T_CONTROL_GAINS_Decode(asn1T_CONTROL_GAINS* val, BitStream* pBitStrm, int* pErrCode);


typedef asn1T_REAL asn1T_CURRENT;

#define asn1T_CURRENT_REQUIRED_BYTES_FOR_ENCODING		12

#define ERR_asn1T_CURRENT		1024 /* (-10000..10000) */

void asn1T_CURRENT_Initialize(asn1T_CURRENT* pVal);
flag asn1T_CURRENT_IsConstraintValid(asn1T_CURRENT* val, int* pErrCode);
flag asn1T_CURRENT_Encode(asn1T_CURRENT* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1T_CURRENT_Decode(asn1T_CURRENT* val, BitStream* pBitStrm, int* pErrCode);


typedef struct {
    long nCount;
    asn1T_REAL arr[4];
} asn1T_DTG_ANGULAR_INCREMENT;

#define asn1T_DTG_ANGULAR_INCREMENT_REQUIRED_BYTES_FOR_ENCODING		48

#define ERR_asn1T_DTG_ANGULAR_INCREMENT		1025 /* (SIZE (4)) */
#define ERR_asn1T_DTG_ANGULAR_INCREMENT_elem		1026 /* (-10000..10000) */

void asn1T_DTG_ANGULAR_INCREMENT_Initialize(asn1T_DTG_ANGULAR_INCREMENT* pVal);
flag asn1T_DTG_ANGULAR_INCREMENT_IsConstraintValid(asn1T_DTG_ANGULAR_INCREMENT* val, int* pErrCode);
flag asn1T_DTG_ANGULAR_INCREMENT_Encode(asn1T_DTG_ANGULAR_INCREMENT* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1T_DTG_ANGULAR_INCREMENT_Decode(asn1T_DTG_ANGULAR_INCREMENT* val, BitStream* pBitStrm, int* pErrCode);


typedef struct {
    long nCount;
    asn1T_REAL arr[4];
} asn1T_DTG_LSB;

#define asn1T_DTG_LSB_REQUIRED_BYTES_FOR_ENCODING		48

#define ERR_asn1T_DTG_LSB		1027 /* (SIZE (4)) */
#define ERR_asn1T_DTG_LSB_elem		1028 /* (-10000..10000) */

void asn1T_DTG_LSB_Initialize(asn1T_DTG_LSB* pVal);
flag asn1T_DTG_LSB_IsConstraintValid(asn1T_DTG_LSB* val, int* pErrCode);
flag asn1T_DTG_LSB_Encode(asn1T_DTG_LSB* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1T_DTG_LSB_Decode(asn1T_DTG_LSB* val, BitStream* pBitStrm, int* pErrCode);


typedef struct {
    long nCount;
    asn1T_REAL arr[30];
} asn1T_DTG_MEAS_TABLE_LINE;

#define asn1T_DTG_MEAS_TABLE_LINE_REQUIRED_BYTES_FOR_ENCODING		360

#define ERR_asn1T_DTG_MEAS_TABLE_LINE		1029 /* (SIZE (30)) */
#define ERR_asn1T_DTG_MEAS_TABLE_LINE_elem		1030 /* (-10000..10000) */

void asn1T_DTG_MEAS_TABLE_LINE_Initialize(asn1T_DTG_MEAS_TABLE_LINE* pVal);
flag asn1T_DTG_MEAS_TABLE_LINE_IsConstraintValid(asn1T_DTG_MEAS_TABLE_LINE* val, int* pErrCode);
flag asn1T_DTG_MEAS_TABLE_LINE_Encode(asn1T_DTG_MEAS_TABLE_LINE* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1T_DTG_MEAS_TABLE_LINE_Decode(asn1T_DTG_MEAS_TABLE_LINE* val, BitStream* pBitStrm, int* pErrCode);


typedef struct {
    long nCount;
    asn1T_DTG_MEAS_TABLE_LINE arr[4];
} asn1T_DTG_MEAS_TABLE;

#define asn1T_DTG_MEAS_TABLE_REQUIRED_BYTES_FOR_ENCODING		1440

#define ERR_asn1T_DTG_MEAS_TABLE		1031 /* (SIZE (4)) */
#define ERR_asn1T_DTG_MEAS_TABLE_elem		1032 /* (SIZE (30)) */

void asn1T_DTG_MEAS_TABLE_Initialize(asn1T_DTG_MEAS_TABLE* pVal);
flag asn1T_DTG_MEAS_TABLE_IsConstraintValid(asn1T_DTG_MEAS_TABLE* val, int* pErrCode);
flag asn1T_DTG_MEAS_TABLE_Encode(asn1T_DTG_MEAS_TABLE* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1T_DTG_MEAS_TABLE_Decode(asn1T_DTG_MEAS_TABLE* val, BitStream* pBitStrm, int* pErrCode);


typedef struct {
    long nCount;
    asn1T_REAL arr[3];
} asn1T_EFFICIENCY_MATRIX_LINE;

#define asn1T_EFFICIENCY_MATRIX_LINE_REQUIRED_BYTES_FOR_ENCODING		36

#define ERR_asn1T_EFFICIENCY_MATRIX_LINE		1033 /* (SIZE (3)) */
#define ERR_asn1T_EFFICIENCY_MATRIX_LINE_elem		1034 /* (-10000..10000) */

void asn1T_EFFICIENCY_MATRIX_LINE_Initialize(asn1T_EFFICIENCY_MATRIX_LINE* pVal);
flag asn1T_EFFICIENCY_MATRIX_LINE_IsConstraintValid(asn1T_EFFICIENCY_MATRIX_LINE* val, int* pErrCode);
flag asn1T_EFFICIENCY_MATRIX_LINE_Encode(asn1T_EFFICIENCY_MATRIX_LINE* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1T_EFFICIENCY_MATRIX_LINE_Decode(asn1T_EFFICIENCY_MATRIX_LINE* val, BitStream* pBitStrm, int* pErrCode);


typedef struct {
    long nCount;
    asn1T_EFFICIENCY_MATRIX_LINE arr[3];
} asn1T_EFFICIENCY_MATRIX;

#define asn1T_EFFICIENCY_MATRIX_REQUIRED_BYTES_FOR_ENCODING		108

#define ERR_asn1T_EFFICIENCY_MATRIX		1035 /* (SIZE (3)) */
#define ERR_asn1T_EFFICIENCY_MATRIX_elem		1036 /* (SIZE (3)) */

void asn1T_EFFICIENCY_MATRIX_Initialize(asn1T_EFFICIENCY_MATRIX* pVal);
flag asn1T_EFFICIENCY_MATRIX_IsConstraintValid(asn1T_EFFICIENCY_MATRIX* val, int* pErrCode);
flag asn1T_EFFICIENCY_MATRIX_Encode(asn1T_EFFICIENCY_MATRIX* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1T_EFFICIENCY_MATRIX_Decode(asn1T_EFFICIENCY_MATRIX* val, BitStream* pBitStrm, int* pErrCode);


typedef struct {
    asn1T_INTEGER fcv1_opening_duration;
    asn1T_INTEGER fcv2_opening_duration;
} asn1T_FCV_OPENING_DUR_CMD;

#define asn1T_FCV_OPENING_DUR_CMD_REQUIRED_BYTES_FOR_ENCODING		3

#define ERR_asn1T_FCV_OPENING_DUR_CMD_fcv1_opening_duration		1037 /* (-1000..1000) */
#define ERR_asn1T_FCV_OPENING_DUR_CMD_fcv2_opening_duration		1038 /* (-1000..1000) */

void asn1T_FCV_OPENING_DUR_CMD_Initialize(asn1T_FCV_OPENING_DUR_CMD* pVal);
flag asn1T_FCV_OPENING_DUR_CMD_IsConstraintValid(asn1T_FCV_OPENING_DUR_CMD* val, int* pErrCode);
flag asn1T_FCV_OPENING_DUR_CMD_Encode(asn1T_FCV_OPENING_DUR_CMD* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1T_FCV_OPENING_DUR_CMD_Decode(asn1T_FCV_OPENING_DUR_CMD* val, BitStream* pBitStrm, int* pErrCode);


typedef struct {
    long nCount;
    asn1T_REAL arr[4];
} asn1T_FORCE_EFFICIENCY_MATRIX_LINE;

#define asn1T_FORCE_EFFICIENCY_MATRIX_LINE_REQUIRED_BYTES_FOR_ENCODING		48

#define ERR_asn1T_FORCE_EFFICIENCY_MATRIX_LINE		1039 /* (SIZE (4)) */
#define ERR_asn1T_FORCE_EFFICIENCY_MATRIX_LINE_elem		1040 /* (-10000..10000) */

void asn1T_FORCE_EFFICIENCY_MATRIX_LINE_Initialize(asn1T_FORCE_EFFICIENCY_MATRIX_LINE* pVal);
flag asn1T_FORCE_EFFICIENCY_MATRIX_LINE_IsConstraintValid(asn1T_FORCE_EFFICIENCY_MATRIX_LINE* val, int* pErrCode);
flag asn1T_FORCE_EFFICIENCY_MATRIX_LINE_Encode(asn1T_FORCE_EFFICIENCY_MATRIX_LINE* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1T_FORCE_EFFICIENCY_MATRIX_LINE_Decode(asn1T_FORCE_EFFICIENCY_MATRIX_LINE* val, BitStream* pBitStrm, int* pErrCode);


typedef struct {
    long nCount;
    asn1T_FORCE_EFFICIENCY_MATRIX_LINE arr[3];
} asn1T_FORCE_EFFICIENCY_MATRIX;

#define asn1T_FORCE_EFFICIENCY_MATRIX_REQUIRED_BYTES_FOR_ENCODING		144

#define ERR_asn1T_FORCE_EFFICIENCY_MATRIX		1041 /* (SIZE (3)) */
#define ERR_asn1T_FORCE_EFFICIENCY_MATRIX_elem		1042 /* (SIZE (4)) */

void asn1T_FORCE_EFFICIENCY_MATRIX_Initialize(asn1T_FORCE_EFFICIENCY_MATRIX* pVal);
flag asn1T_FORCE_EFFICIENCY_MATRIX_IsConstraintValid(asn1T_FORCE_EFFICIENCY_MATRIX* val, int* pErrCode);
flag asn1T_FORCE_EFFICIENCY_MATRIX_Encode(asn1T_FORCE_EFFICIENCY_MATRIX* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1T_FORCE_EFFICIENCY_MATRIX_Decode(asn1T_FORCE_EFFICIENCY_MATRIX* val, BitStream* pBitStrm, int* pErrCode);


typedef struct {
    flag  ftc1_health_status_is_on;
    flag  ftc2_health_status_is_on;
    flag  ftc3_health_status_is_on;
} asn1T_FTCP_HEALTH_STATUS;

#define asn1T_FTCP_HEALTH_STATUS_REQUIRED_BYTES_FOR_ENCODING		1


void asn1T_FTCP_HEALTH_STATUS_Initialize(asn1T_FTCP_HEALTH_STATUS* pVal);
flag asn1T_FTCP_HEALTH_STATUS_IsConstraintValid(asn1T_FTCP_HEALTH_STATUS* val, int* pErrCode);
flag asn1T_FTCP_HEALTH_STATUS_Encode(asn1T_FTCP_HEALTH_STATUS* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1T_FTCP_HEALTH_STATUS_Decode(asn1T_FTCP_HEALTH_STATUS* val, BitStream* pBitStrm, int* pErrCode);


typedef struct {
    long nCount;
    asn1T_REAL arr[3];
} asn1T_INERTIA;

#define asn1T_INERTIA_REQUIRED_BYTES_FOR_ENCODING		36

#define ERR_asn1T_INERTIA		1043 /* (SIZE (3)) */
#define ERR_asn1T_INERTIA_elem		1044 /* (-10000..10000) */

void asn1T_INERTIA_Initialize(asn1T_INERTIA* pVal);
flag asn1T_INERTIA_IsConstraintValid(asn1T_INERTIA* val, int* pErrCode);
flag asn1T_INERTIA_Encode(asn1T_INERTIA* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1T_INERTIA_Decode(asn1T_INERTIA* val, BitStream* pBitStrm, int* pErrCode);


typedef struct {
    long nCount;
    asn1T_REAL arr[4];
} asn1T_INITIAL_EFFICIENCY_MATRIX_LINE;

#define asn1T_INITIAL_EFFICIENCY_MATRIX_LINE_REQUIRED_BYTES_FOR_ENCODING		48

#define ERR_asn1T_INITIAL_EFFICIENCY_MATRIX_LINE		1045 /* (SIZE (4)) */
#define ERR_asn1T_INITIAL_EFFICIENCY_MATRIX_LINE_elem		1046 /* (-10000..10000) */

void asn1T_INITIAL_EFFICIENCY_MATRIX_LINE_Initialize(asn1T_INITIAL_EFFICIENCY_MATRIX_LINE* pVal);
flag asn1T_INITIAL_EFFICIENCY_MATRIX_LINE_IsConstraintValid(asn1T_INITIAL_EFFICIENCY_MATRIX_LINE* val, int* pErrCode);
flag asn1T_INITIAL_EFFICIENCY_MATRIX_LINE_Encode(asn1T_INITIAL_EFFICIENCY_MATRIX_LINE* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1T_INITIAL_EFFICIENCY_MATRIX_LINE_Decode(asn1T_INITIAL_EFFICIENCY_MATRIX_LINE* val, BitStream* pBitStrm, int* pErrCode);


typedef struct {
    long nCount;
    asn1T_INITIAL_EFFICIENCY_MATRIX_LINE arr[6];
} asn1T_INITIAL_EFFICIENCY_MATRIX;

#define asn1T_INITIAL_EFFICIENCY_MATRIX_REQUIRED_BYTES_FOR_ENCODING		288

#define ERR_asn1T_INITIAL_EFFICIENCY_MATRIX		1047 /* (SIZE (6)) */
#define ERR_asn1T_INITIAL_EFFICIENCY_MATRIX_elem		1048 /* (SIZE (4)) */

void asn1T_INITIAL_EFFICIENCY_MATRIX_Initialize(asn1T_INITIAL_EFFICIENCY_MATRIX* pVal);
flag asn1T_INITIAL_EFFICIENCY_MATRIX_IsConstraintValid(asn1T_INITIAL_EFFICIENCY_MATRIX* val, int* pErrCode);
flag asn1T_INITIAL_EFFICIENCY_MATRIX_Encode(asn1T_INITIAL_EFFICIENCY_MATRIX* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1T_INITIAL_EFFICIENCY_MATRIX_Decode(asn1T_INITIAL_EFFICIENCY_MATRIX* val, BitStream* pBitStrm, int* pErrCode);


typedef asn1T_REAL asn1T_MASS;

#define asn1T_MASS_REQUIRED_BYTES_FOR_ENCODING		12

#define ERR_asn1T_MASS		1049 /* (-10000..10000) */

void asn1T_MASS_Initialize(asn1T_MASS* pVal);
flag asn1T_MASS_IsConstraintValid(asn1T_MASS* val, int* pErrCode);
flag asn1T_MASS_Encode(asn1T_MASS* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1T_MASS_Decode(asn1T_MASS* val, BitStream* pBitStrm, int* pErrCode);


typedef struct {
    long nCount;
    asn1T_REAL arr[4];
} asn1T_MATRIX_3_4_LINE;

#define asn1T_MATRIX_3_4_LINE_REQUIRED_BYTES_FOR_ENCODING		48

#define ERR_asn1T_MATRIX_3_4_LINE		1050 /* (SIZE (4)) */
#define ERR_asn1T_MATRIX_3_4_LINE_elem		1051 /* (-10000..10000) */

void asn1T_MATRIX_3_4_LINE_Initialize(asn1T_MATRIX_3_4_LINE* pVal);
flag asn1T_MATRIX_3_4_LINE_IsConstraintValid(asn1T_MATRIX_3_4_LINE* val, int* pErrCode);
flag asn1T_MATRIX_3_4_LINE_Encode(asn1T_MATRIX_3_4_LINE* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1T_MATRIX_3_4_LINE_Decode(asn1T_MATRIX_3_4_LINE* val, BitStream* pBitStrm, int* pErrCode);


typedef struct {
    long nCount;
    asn1T_MATRIX_3_4_LINE arr[3];
} asn1T_MATRIX_3_4;

#define asn1T_MATRIX_3_4_REQUIRED_BYTES_FOR_ENCODING		144

#define ERR_asn1T_MATRIX_3_4		1052 /* (SIZE (3)) */
#define ERR_asn1T_MATRIX_3_4_elem		1053 /* (SIZE (4)) */

void asn1T_MATRIX_3_4_Initialize(asn1T_MATRIX_3_4* pVal);
flag asn1T_MATRIX_3_4_IsConstraintValid(asn1T_MATRIX_3_4* val, int* pErrCode);
flag asn1T_MATRIX_3_4_Encode(asn1T_MATRIX_3_4* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1T_MATRIX_3_4_Decode(asn1T_MATRIX_3_4* val, BitStream* pBitStrm, int* pErrCode);


typedef asn1T_INTEGER asn1T_MSU_ID;

#define asn1T_MSU_ID_REQUIRED_BYTES_FOR_ENCODING		2

#define ERR_asn1T_MSU_ID		1054 /* (-1000..1000) */

void asn1T_MSU_ID_Initialize(asn1T_MSU_ID* pVal);
flag asn1T_MSU_ID_IsConstraintValid(asn1T_MSU_ID* val, int* pErrCode);
flag asn1T_MSU_ID_Encode(asn1T_MSU_ID* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1T_MSU_ID_Decode(asn1T_MSU_ID* val, BitStream* pBitStrm, int* pErrCode);


typedef enum {
    slave = 0,
    master = 1
} asn1T_MSU_STATUS;

#define asn1T_MSU_STATUS_REQUIRED_BYTES_FOR_ENCODING		1


void asn1T_MSU_STATUS_Initialize(asn1T_MSU_STATUS* pVal);
flag asn1T_MSU_STATUS_IsConstraintValid(asn1T_MSU_STATUS* val, int* pErrCode);
flag asn1T_MSU_STATUS_Encode(asn1T_MSU_STATUS* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1T_MSU_STATUS_Decode(asn1T_MSU_STATUS* val, BitStream* pBitStrm, int* pErrCode);


typedef asn1T_INTEGER asn1T_OBUT;

#define asn1T_OBUT_REQUIRED_BYTES_FOR_ENCODING		2

#define ERR_asn1T_OBUT		1055 /* (-1000..1000) */

void asn1T_OBUT_Initialize(asn1T_OBUT* pVal);
flag asn1T_OBUT_IsConstraintValid(asn1T_OBUT* val, int* pErrCode);
flag asn1T_OBUT_Encode(asn1T_OBUT* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1T_OBUT_Decode(asn1T_OBUT* val, BitStream* pBitStrm, int* pErrCode);


typedef struct {
    flag  on_cmd;
    flag  off_cmd;
} asn1T_ON_OFF_CMD;

#define asn1T_ON_OFF_CMD_REQUIRED_BYTES_FOR_ENCODING		1


void asn1T_ON_OFF_CMD_Initialize(asn1T_ON_OFF_CMD* pVal);
flag asn1T_ON_OFF_CMD_IsConstraintValid(asn1T_ON_OFF_CMD* val, int* pErrCode);
flag asn1T_ON_OFF_CMD_Encode(asn1T_ON_OFF_CMD* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1T_ON_OFF_CMD_Decode(asn1T_ON_OFF_CMD* val, BitStream* pBitStrm, int* pErrCode);


typedef struct {
    flag  data_is_available;
    asn1T_INTEGER x_velocity;
    asn1T_INTEGER y_velocity;
} asn1T_PFS_ACM_DATA;

#define asn1T_PFS_ACM_DATA_REQUIRED_BYTES_FOR_ENCODING		3

#define ERR_asn1T_PFS_ACM_DATA_x_velocity		1056 /* (-1000..1000) */
#define ERR_asn1T_PFS_ACM_DATA_y_velocity		1057 /* (-1000..1000) */

void asn1T_PFS_ACM_DATA_Initialize(asn1T_PFS_ACM_DATA* pVal);
flag asn1T_PFS_ACM_DATA_IsConstraintValid(asn1T_PFS_ACM_DATA* val, int* pErrCode);
flag asn1T_PFS_ACM_DATA_Encode(asn1T_PFS_ACM_DATA* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1T_PFS_ACM_DATA_Decode(asn1T_PFS_ACM_DATA* val, BitStream* pBitStrm, int* pErrCode);


typedef struct {
    asn1T_ACS_CMD pfs_ewc_msu_pde1_t;
    asn1T_ACS_CMD pfs_ewc_msu_pde2_t;
    asn1T_ACS_CMD pfs_ewc_msu_pde3_t;
    asn1T_ACS_CMD pfs_ewc_msu_pde4_t;
} asn1T_PFS_EWC_MSU_PDE_T;

#define asn1T_PFS_EWC_MSU_PDE_T_REQUIRED_BYTES_FOR_ENCODING		1


void asn1T_PFS_EWC_MSU_PDE_T_Initialize(asn1T_PFS_EWC_MSU_PDE_T* pVal);
flag asn1T_PFS_EWC_MSU_PDE_T_IsConstraintValid(asn1T_PFS_EWC_MSU_PDE_T* val, int* pErrCode);
flag asn1T_PFS_EWC_MSU_PDE_T_Encode(asn1T_PFS_EWC_MSU_PDE_T* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1T_PFS_EWC_MSU_PDE_T_Decode(asn1T_PFS_EWC_MSU_PDE_T* val, BitStream* pBitStrm, int* pErrCode);


typedef enum {
    dtg_fine_mode = 0,
    dtg_coarse_mode = 1
} asn1T_PFS_EWM_DTG_MSU_MODE;

#define asn1T_PFS_EWM_DTG_MSU_MODE_REQUIRED_BYTES_FOR_ENCODING		1


void asn1T_PFS_EWM_DTG_MSU_MODE_Initialize(asn1T_PFS_EWM_DTG_MSU_MODE* pVal);
flag asn1T_PFS_EWM_DTG_MSU_MODE_IsConstraintValid(asn1T_PFS_EWM_DTG_MSU_MODE* val, int* pErrCode);
flag asn1T_PFS_EWM_DTG_MSU_MODE_Encode(asn1T_PFS_EWM_DTG_MSU_MODE* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1T_PFS_EWM_DTG_MSU_MODE_Decode(asn1T_PFS_EWM_DTG_MSU_MODE* val, BitStream* pBitStrm, int* pErrCode);


typedef struct {
    flag  pfs_ewm_msu_hs_is_ok1;
    flag  pfs_ewm_msu_hs_is_ok2;
    flag  pfs_ewm_msu_hs_is_ok3;
} asn1T_PFS_EWM_MSU_MSU_HS;

#define asn1T_PFS_EWM_MSU_MSU_HS_REQUIRED_BYTES_FOR_ENCODING		1


void asn1T_PFS_EWM_MSU_MSU_HS_Initialize(asn1T_PFS_EWM_MSU_MSU_HS* pVal);
flag asn1T_PFS_EWM_MSU_MSU_HS_IsConstraintValid(asn1T_PFS_EWM_MSU_MSU_HS* val, int* pErrCode);
flag asn1T_PFS_EWM_MSU_MSU_HS_Encode(asn1T_PFS_EWM_MSU_MSU_HS* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1T_PFS_EWM_MSU_MSU_HS_Decode(asn1T_PFS_EWM_MSU_MSU_HS* val, BitStream* pBitStrm, int* pErrCode);


typedef struct {
    asn1T_REAL pfs_ewm_ssu_msu_meas1;
    asn1T_REAL pfs_ewm_ssu_msu_meas2;
    asn1T_REAL pfs_ewm_ssu_msu_meas3;
    asn1T_REAL pfs_ewm_ssu_msu_meas4;
} asn1T_PFS_EWM_SSU_MSU_MEAS;

#define asn1T_PFS_EWM_SSU_MSU_MEAS_REQUIRED_BYTES_FOR_ENCODING		48

#define ERR_asn1T_PFS_EWM_SSU_MSU_MEAS_pfs_ewm_ssu_msu_meas1		1058 /* (-10000..10000) */
#define ERR_asn1T_PFS_EWM_SSU_MSU_MEAS_pfs_ewm_ssu_msu_meas2		1059 /* (-10000..10000) */
#define ERR_asn1T_PFS_EWM_SSU_MSU_MEAS_pfs_ewm_ssu_msu_meas3		1060 /* (-10000..10000) */
#define ERR_asn1T_PFS_EWM_SSU_MSU_MEAS_pfs_ewm_ssu_msu_meas4		1061 /* (-10000..10000) */

void asn1T_PFS_EWM_SSU_MSU_MEAS_Initialize(asn1T_PFS_EWM_SSU_MSU_MEAS* pVal);
flag asn1T_PFS_EWM_SSU_MSU_MEAS_IsConstraintValid(asn1T_PFS_EWM_SSU_MSU_MEAS* val, int* pErrCode);
flag asn1T_PFS_EWM_SSU_MSU_MEAS_Encode(asn1T_PFS_EWM_SSU_MSU_MEAS* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1T_PFS_EWM_SSU_MSU_MEAS_Decode(asn1T_PFS_EWM_SSU_MSU_MEAS* val, BitStream* pBitStrm, int* pErrCode);


typedef struct {
    flag  data_is_available;
    asn1T_INTEGER current_mode;
    flag  target_data_valid;
    flag  on_line_bit_result;
    asn1T_INTEGER frame_counter;
    flag  retro1_data_valid;
    flag  retro2_data_valid;
    asn1T_INTEGER target_range;
    asn1T_INTEGER target_datation;
    asn1T_INTEGER retro1_range;
    asn1T_INTEGER retro1_datation;
    asn1T_INTEGER retro2_range;
    asn1T_INTEGER retro2_datation;
} asn1T_PFS_TGM_DATA;

#define asn1T_PFS_TGM_DATA_REQUIRED_BYTES_FOR_ENCODING		12

#define ERR_asn1T_PFS_TGM_DATA_current_mode		1062 /* (-1000..1000) */
#define ERR_asn1T_PFS_TGM_DATA_frame_counter		1063 /* (-1000..1000) */
#define ERR_asn1T_PFS_TGM_DATA_target_range		1064 /* (-1000..1000) */
#define ERR_asn1T_PFS_TGM_DATA_target_datation		1065 /* (-1000..1000) */
#define ERR_asn1T_PFS_TGM_DATA_retro1_range		1066 /* (-1000..1000) */
#define ERR_asn1T_PFS_TGM_DATA_retro1_datation		1067 /* (-1000..1000) */
#define ERR_asn1T_PFS_TGM_DATA_retro2_range		1068 /* (-1000..1000) */
#define ERR_asn1T_PFS_TGM_DATA_retro2_datation		1069 /* (-1000..1000) */

void asn1T_PFS_TGM_DATA_Initialize(asn1T_PFS_TGM_DATA* pVal);
flag asn1T_PFS_TGM_DATA_IsConstraintValid(asn1T_PFS_TGM_DATA* val, int* pErrCode);
flag asn1T_PFS_TGM_DATA_Encode(asn1T_PFS_TGM_DATA* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1T_PFS_TGM_DATA_Decode(asn1T_PFS_TGM_DATA* val, BitStream* pBitStrm, int* pErrCode);


typedef asn1T_REAL asn1T_POWER_CONSUMPTION;

#define asn1T_POWER_CONSUMPTION_REQUIRED_BYTES_FOR_ENCODING		12

#define ERR_asn1T_POWER_CONSUMPTION		1070 /* (-10000..10000) */

void asn1T_POWER_CONSUMPTION_Initialize(asn1T_POWER_CONSUMPTION* pVal);
flag asn1T_POWER_CONSUMPTION_IsConstraintValid(asn1T_POWER_CONSUMPTION* val, int* pErrCode);
flag asn1T_POWER_CONSUMPTION_Encode(asn1T_POWER_CONSUMPTION* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1T_POWER_CONSUMPTION_Decode(asn1T_POWER_CONSUMPTION* val, BitStream* pBitStrm, int* pErrCode);


typedef struct {
    long nCount;
    asn1T_REAL arr[4];
} asn1T_QUATERNION;

#define asn1T_QUATERNION_REQUIRED_BYTES_FOR_ENCODING		48

#define ERR_asn1T_QUATERNION		1071 /* (SIZE (4)) */
#define ERR_asn1T_QUATERNION_elem		1072 /* (-10000..10000) */

void asn1T_QUATERNION_Initialize(asn1T_QUATERNION* pVal);
flag asn1T_QUATERNION_IsConstraintValid(asn1T_QUATERNION* val, int* pErrCode);
flag asn1T_QUATERNION_Encode(asn1T_QUATERNION* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1T_QUATERNION_Decode(asn1T_QUATERNION* val, BitStream* pBitStrm, int* pErrCode);


typedef struct {
    flag  pde1_pde4_config_is_selected;
    flag  pde1_is_available;
    flag  pde2_is_available;
    flag  pde3_is_available;
    flag  pde4_is_available;
    flag  dpu_reset_is_requested;
    asn1T_INTEGER cam_duration;
    flag  cam_boost_only_is_requested;
    flag  halt_mode_is_requested;
} asn1T_SEQUENCER_CONFIGURATION;

#define asn1T_SEQUENCER_CONFIGURATION_REQUIRED_BYTES_FOR_ENCODING		3

#define ERR_asn1T_SEQUENCER_CONFIGURATION_cam_duration		1073 /* (-1000..1000) */

void asn1T_SEQUENCER_CONFIGURATION_Initialize(asn1T_SEQUENCER_CONFIGURATION* pVal);
flag asn1T_SEQUENCER_CONFIGURATION_IsConstraintValid(asn1T_SEQUENCER_CONFIGURATION* val, int* pErrCode);
flag asn1T_SEQUENCER_CONFIGURATION_Encode(asn1T_SEQUENCER_CONFIGURATION* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1T_SEQUENCER_CONFIGURATION_Decode(asn1T_SEQUENCER_CONFIGURATION* val, BitStream* pBitStrm, int* pErrCode);


typedef asn1T_INTEGER asn1T_SW_WARNING_CODE;

#define asn1T_SW_WARNING_CODE_REQUIRED_BYTES_FOR_ENCODING		2

#define ERR_asn1T_SW_WARNING_CODE		1074 /* (-1000..1000) */

void asn1T_SW_WARNING_CODE_Initialize(asn1T_SW_WARNING_CODE* pVal);
flag asn1T_SW_WARNING_CODE_IsConstraintValid(asn1T_SW_WARNING_CODE* val, int* pErrCode);
flag asn1T_SW_WARNING_CODE_Encode(asn1T_SW_WARNING_CODE* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1T_SW_WARNING_CODE_Decode(asn1T_SW_WARNING_CODE* val, BitStream* pBitStrm, int* pErrCode);


typedef struct {
    long nCount;
    flag  arr[4];
} asn1T_SYNCHRO_BROADCAST_STATUS;

#define asn1T_SYNCHRO_BROADCAST_STATUS_REQUIRED_BYTES_FOR_ENCODING		1

#define ERR_asn1T_SYNCHRO_BROADCAST_STATUS		1075 /* (SIZE (4)) */

void asn1T_SYNCHRO_BROADCAST_STATUS_Initialize(asn1T_SYNCHRO_BROADCAST_STATUS* pVal);
flag asn1T_SYNCHRO_BROADCAST_STATUS_IsConstraintValid(asn1T_SYNCHRO_BROADCAST_STATUS* val, int* pErrCode);
flag asn1T_SYNCHRO_BROADCAST_STATUS_Encode(asn1T_SYNCHRO_BROADCAST_STATUS* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1T_SYNCHRO_BROADCAST_STATUS_Decode(asn1T_SYNCHRO_BROADCAST_STATUS* val, BitStream* pBitStrm, int* pErrCode);


typedef asn1T_REAL asn1T_TEMP;

#define asn1T_TEMP_REQUIRED_BYTES_FOR_ENCODING		12

#define ERR_asn1T_TEMP		1076 /* (-10000..10000) */

void asn1T_TEMP_Initialize(asn1T_TEMP* pVal);
flag asn1T_TEMP_IsConstraintValid(asn1T_TEMP* val, int* pErrCode);
flag asn1T_TEMP_Encode(asn1T_TEMP* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1T_TEMP_Decode(asn1T_TEMP* val, BitStream* pBitStrm, int* pErrCode);


typedef struct {
    asn1T_FCV_OPENING_DUR_CMD thrusters_opening_pde1;
    asn1T_FCV_OPENING_DUR_CMD thrusters_opening_pde2;
} asn1T_THRUSTERS_OPENING;

#define asn1T_THRUSTERS_OPENING_REQUIRED_BYTES_FOR_ENCODING		6


void asn1T_THRUSTERS_OPENING_Initialize(asn1T_THRUSTERS_OPENING* pVal);
flag asn1T_THRUSTERS_OPENING_IsConstraintValid(asn1T_THRUSTERS_OPENING* val, int* pErrCode);
flag asn1T_THRUSTERS_OPENING_Encode(asn1T_THRUSTERS_OPENING* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1T_THRUSTERS_OPENING_Decode(asn1T_THRUSTERS_OPENING* val, BitStream* pBitStrm, int* pErrCode);


typedef struct {
    long nCount;
    asn1T_REAL arr[3];
} asn1T_TORQUE_EFFICIENCY_MATRIX_LINE;

#define asn1T_TORQUE_EFFICIENCY_MATRIX_LINE_REQUIRED_BYTES_FOR_ENCODING		36

#define ERR_asn1T_TORQUE_EFFICIENCY_MATRIX_LINE		1077 /* (SIZE (3)) */
#define ERR_asn1T_TORQUE_EFFICIENCY_MATRIX_LINE_elem		1078 /* (-10000..10000) */

void asn1T_TORQUE_EFFICIENCY_MATRIX_LINE_Initialize(asn1T_TORQUE_EFFICIENCY_MATRIX_LINE* pVal);
flag asn1T_TORQUE_EFFICIENCY_MATRIX_LINE_IsConstraintValid(asn1T_TORQUE_EFFICIENCY_MATRIX_LINE* val, int* pErrCode);
flag asn1T_TORQUE_EFFICIENCY_MATRIX_LINE_Encode(asn1T_TORQUE_EFFICIENCY_MATRIX_LINE* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1T_TORQUE_EFFICIENCY_MATRIX_LINE_Decode(asn1T_TORQUE_EFFICIENCY_MATRIX_LINE* val, BitStream* pBitStrm, int* pErrCode);


typedef struct {
    long nCount;
    asn1T_TORQUE_EFFICIENCY_MATRIX_LINE arr[3];
} asn1T_TORQUE_EFFICIENCY_MATRIX;

#define asn1T_TORQUE_EFFICIENCY_MATRIX_REQUIRED_BYTES_FOR_ENCODING		108

#define ERR_asn1T_TORQUE_EFFICIENCY_MATRIX		1079 /* (SIZE (3)) */
#define ERR_asn1T_TORQUE_EFFICIENCY_MATRIX_elem		1080 /* (SIZE (3)) */

void asn1T_TORQUE_EFFICIENCY_MATRIX_Initialize(asn1T_TORQUE_EFFICIENCY_MATRIX* pVal);
flag asn1T_TORQUE_EFFICIENCY_MATRIX_IsConstraintValid(asn1T_TORQUE_EFFICIENCY_MATRIX* val, int* pErrCode);
flag asn1T_TORQUE_EFFICIENCY_MATRIX_Encode(asn1T_TORQUE_EFFICIENCY_MATRIX* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1T_TORQUE_EFFICIENCY_MATRIX_Decode(asn1T_TORQUE_EFFICIENCY_MATRIX* val, BitStream* pBitStrm, int* pErrCode);


typedef struct {
    long nCount;
    asn1T_REAL arr[12];
} asn1T_VECTOR12;

#define asn1T_VECTOR12_REQUIRED_BYTES_FOR_ENCODING		144

#define ERR_asn1T_VECTOR12		1081 /* (SIZE (12)) */
#define ERR_asn1T_VECTOR12_elem		1082 /* (-10000..10000) */

void asn1T_VECTOR12_Initialize(asn1T_VECTOR12* pVal);
flag asn1T_VECTOR12_IsConstraintValid(asn1T_VECTOR12* val, int* pErrCode);
flag asn1T_VECTOR12_Encode(asn1T_VECTOR12* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1T_VECTOR12_Decode(asn1T_VECTOR12* val, BitStream* pBitStrm, int* pErrCode);


typedef struct {
    long nCount;
    asn1T_REAL arr[18];
} asn1T_VECTOR18;

#define asn1T_VECTOR18_REQUIRED_BYTES_FOR_ENCODING		216

#define ERR_asn1T_VECTOR18		1083 /* (SIZE (18)) */
#define ERR_asn1T_VECTOR18_elem		1084 /* (-10000..10000) */

void asn1T_VECTOR18_Initialize(asn1T_VECTOR18* pVal);
flag asn1T_VECTOR18_IsConstraintValid(asn1T_VECTOR18* val, int* pErrCode);
flag asn1T_VECTOR18_Encode(asn1T_VECTOR18* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1T_VECTOR18_Decode(asn1T_VECTOR18* val, BitStream* pBitStrm, int* pErrCode);


typedef struct {
    long nCount;
    asn1T_REAL arr[3];
} asn1T_VECTOR3;

#define asn1T_VECTOR3_REQUIRED_BYTES_FOR_ENCODING		36

#define ERR_asn1T_VECTOR3		1085 /* (SIZE (3)) */
#define ERR_asn1T_VECTOR3_elem		1086 /* (-10000..10000) */

void asn1T_VECTOR3_Initialize(asn1T_VECTOR3* pVal);
flag asn1T_VECTOR3_IsConstraintValid(asn1T_VECTOR3* val, int* pErrCode);
flag asn1T_VECTOR3_Encode(asn1T_VECTOR3* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1T_VECTOR3_Decode(asn1T_VECTOR3* val, BitStream* pBitStrm, int* pErrCode);


typedef struct {
    long nCount;
    asn1T_REAL arr[4];
} asn1T_VECTOR4;

#define asn1T_VECTOR4_REQUIRED_BYTES_FOR_ENCODING		48

#define ERR_asn1T_VECTOR4		1087 /* (SIZE (4)) */
#define ERR_asn1T_VECTOR4_elem		1088 /* (-10000..10000) */

void asn1T_VECTOR4_Initialize(asn1T_VECTOR4* pVal);
flag asn1T_VECTOR4_IsConstraintValid(asn1T_VECTOR4* val, int* pErrCode);
flag asn1T_VECTOR4_Encode(asn1T_VECTOR4* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1T_VECTOR4_Decode(asn1T_VECTOR4* val, BitStream* pBitStrm, int* pErrCode);


typedef struct {
    long nCount;
    asn1T_REAL arr[6];
} asn1T_VECTOR6;

#define asn1T_VECTOR6_REQUIRED_BYTES_FOR_ENCODING		72

#define ERR_asn1T_VECTOR6		1089 /* (SIZE (6)) */
#define ERR_asn1T_VECTOR6_elem		1090 /* (-10000..10000) */

void asn1T_VECTOR6_Initialize(asn1T_VECTOR6* pVal);
flag asn1T_VECTOR6_IsConstraintValid(asn1T_VECTOR6* val, int* pErrCode);
flag asn1T_VECTOR6_Encode(asn1T_VECTOR6* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1T_VECTOR6_Decode(asn1T_VECTOR6* val, BitStream* pBitStrm, int* pErrCode);


typedef struct {
    long nCount;
    asn1T_REAL arr[8];
} asn1T_VECTOR8;

#define asn1T_VECTOR8_REQUIRED_BYTES_FOR_ENCODING		96

#define ERR_asn1T_VECTOR8		1091 /* (SIZE (8)) */
#define ERR_asn1T_VECTOR8_elem		1092 /* (-10000..10000) */

void asn1T_VECTOR8_Initialize(asn1T_VECTOR8* pVal);
flag asn1T_VECTOR8_IsConstraintValid(asn1T_VECTOR8* val, int* pErrCode);
flag asn1T_VECTOR8_Encode(asn1T_VECTOR8* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1T_VECTOR8_Decode(asn1T_VECTOR8* val, BitStream* pBitStrm, int* pErrCode);


typedef struct {
    long nCount;
    asn1T_REAL arr[9];
} asn1T_VECTOR9;

#define asn1T_VECTOR9_REQUIRED_BYTES_FOR_ENCODING		108

#define ERR_asn1T_VECTOR9		1093 /* (SIZE (9)) */
#define ERR_asn1T_VECTOR9_elem		1094 /* (-10000..10000) */

void asn1T_VECTOR9_Initialize(asn1T_VECTOR9* pVal);
flag asn1T_VECTOR9_IsConstraintValid(asn1T_VECTOR9* val, int* pErrCode);
flag asn1T_VECTOR9_Encode(asn1T_VECTOR9* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1T_VECTOR9_Decode(asn1T_VECTOR9* val, BitStream* pBitStrm, int* pErrCode);


typedef asn1T_REAL asn1T_VELOCITY;

#define asn1T_VELOCITY_REQUIRED_BYTES_FOR_ENCODING		12

#define ERR_asn1T_VELOCITY		1095 /* (-10000..10000) */

void asn1T_VELOCITY_Initialize(asn1T_VELOCITY* pVal);
flag asn1T_VELOCITY_IsConstraintValid(asn1T_VELOCITY* val, int* pErrCode);
flag asn1T_VELOCITY_Encode(asn1T_VELOCITY* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1T_VELOCITY_Decode(asn1T_VELOCITY* val, BitStream* pBitStrm, int* pErrCode);


typedef asn1T_REAL asn1T_VOLTAGE;

#define asn1T_VOLTAGE_REQUIRED_BYTES_FOR_ENCODING		12

#define ERR_asn1T_VOLTAGE		1096 /* (-10000..10000) */

void asn1T_VOLTAGE_Initialize(asn1T_VOLTAGE* pVal);
flag asn1T_VOLTAGE_IsConstraintValid(asn1T_VOLTAGE* val, int* pErrCode);
flag asn1T_VOLTAGE_Encode(asn1T_VOLTAGE* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1T_VOLTAGE_Decode(asn1T_VOLTAGE* val, BitStream* pBitStrm, int* pErrCode);


typedef asn1T_INTEGER asn1INTEGER16;

#define asn1INTEGER16_REQUIRED_BYTES_FOR_ENCODING		2

#define ERR_asn1INTEGER16		1097 /* (-1000..1000) */

void asn1INTEGER16_Initialize(asn1INTEGER16* pVal);
flag asn1INTEGER16_IsConstraintValid(asn1INTEGER16* val, int* pErrCode);
flag asn1INTEGER16_Encode(asn1INTEGER16* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1INTEGER16_Decode(asn1INTEGER16* val, BitStream* pBitStrm, int* pErrCode);


typedef struct {
    flag  is_in_cam;
    flag  is_in_sa;
    flag  is_in_sp;
} asn1T_CAM_MODE;

#define asn1T_CAM_MODE_REQUIRED_BYTES_FOR_ENCODING		1


void asn1T_CAM_MODE_Initialize(asn1T_CAM_MODE* pVal);
flag asn1T_CAM_MODE_IsConstraintValid(asn1T_CAM_MODE* val, int* pErrCode);
flag asn1T_CAM_MODE_Encode(asn1T_CAM_MODE* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1T_CAM_MODE_Decode(asn1T_CAM_MODE* val, BitStream* pBitStrm, int* pErrCode);


typedef struct {
    asn1T_CONFIGURATION_TABLE configuration_table;
    flag  new_config_is_available;
} asn1T_PFS_EC_UPDATE_CONF_MSU;

#define asn1T_PFS_EC_UPDATE_CONF_MSU_REQUIRED_BYTES_FOR_ENCODING		3


void asn1T_PFS_EC_UPDATE_CONF_MSU_Initialize(asn1T_PFS_EC_UPDATE_CONF_MSU* pVal);
flag asn1T_PFS_EC_UPDATE_CONF_MSU_IsConstraintValid(asn1T_PFS_EC_UPDATE_CONF_MSU* val, int* pErrCode);
flag asn1T_PFS_EC_UPDATE_CONF_MSU_Encode(asn1T_PFS_EC_UPDATE_CONF_MSU* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1T_PFS_EC_UPDATE_CONF_MSU_Decode(asn1T_PFS_EC_UPDATE_CONF_MSU* val, BitStream* pBitStrm, int* pErrCode);


typedef struct {
    flag  state_is_pfs_m_standby;
    flag  state_is_pfs_m_ready_for_cam;
    flag  state_is_pfs_m_cam_prgs;
    flag  state_is_pfs_m_cam_inhib;
} asn1T_MSU_STATE;

#define asn1T_MSU_STATE_REQUIRED_BYTES_FOR_ENCODING		1


void asn1T_MSU_STATE_Initialize(asn1T_MSU_STATE* pVal);
flag asn1T_MSU_STATE_IsConstraintValid(asn1T_MSU_STATE* val, int* pErrCode);
flag asn1T_MSU_STATE_Encode(asn1T_MSU_STATE* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1T_MSU_STATE_Decode(asn1T_MSU_STATE* val, BitStream* pBitStrm, int* pErrCode);


typedef struct {
    asn1T_ON_OFF_CMD set_pfs_ewc_msu_dpu_reset;
    asn1T_ON_OFF_CMD set_pfs_ewc_msu_dpu_cam;
} asn1T_DPU_CMD;

#define asn1T_DPU_CMD_REQUIRED_BYTES_FOR_ENCODING		1


void asn1T_DPU_CMD_Initialize(asn1T_DPU_CMD* pVal);
flag asn1T_DPU_CMD_IsConstraintValid(asn1T_DPU_CMD* val, int* pErrCode);
flag asn1T_DPU_CMD_Encode(asn1T_DPU_CMD* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1T_DPU_CMD_Decode(asn1T_DPU_CMD* val, BitStream* pBitStrm, int* pErrCode);


typedef struct {
    flag  set_pfs_hltm_cam_test2_status;
    flag  set_pfs_hltm_cam_trig_status;
    flag  set_pfs_hltm_msu_master_status;
    flag  set_pfs_hltm_config_status;
    flag  set_pfs_hltm_msu_health_status;
    flag  set_pfs_hltm_ftcp_res_detected;
    asn1T_MSU_STATE msu_state;
} asn1T_HLTM;

#define asn1T_HLTM_REQUIRED_BYTES_FOR_ENCODING		2


void asn1T_HLTM_Initialize(asn1T_HLTM* pVal);
flag asn1T_HLTM_IsConstraintValid(asn1T_HLTM* val, int* pErrCode);
flag asn1T_HLTM_Encode(asn1T_HLTM* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1T_HLTM_Decode(asn1T_HLTM* val, BitStream* pBitStrm, int* pErrCode);


typedef struct {
    flag  pfs_hltc_update_config_is_on;
    asn1T_PFS_EC_UPDATE_CONF_MSU pfs_ec_update_config;
    flag  pfs_hltc_enable_cam_test2_is_on;
    flag  pfs_hltc_disable_cam_test2_on;
} asn1T_HLTC;

#define asn1T_HLTC_REQUIRED_BYTES_FOR_ENCODING		3


void asn1T_HLTC_Initialize(asn1T_HLTC* pVal);
flag asn1T_HLTC_IsConstraintValid(asn1T_HLTC* val, int* pErrCode);
flag asn1T_HLTC_Encode(asn1T_HLTC* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1T_HLTC_Decode(asn1T_HLTC* val, BitStream* pBitStrm, int* pErrCode);


typedef asn1MYBOOL asn1T_PFS_IWM_ARMING_RELAY_STATUS_ON;

#define asn1T_PFS_IWM_ARMING_RELAY_STATUS_ON_REQUIRED_BYTES_FOR_ENCODING		1


void asn1T_PFS_IWM_ARMING_RELAY_STATUS_ON_Initialize(asn1T_PFS_IWM_ARMING_RELAY_STATUS_ON* pVal);
flag asn1T_PFS_IWM_ARMING_RELAY_STATUS_ON_IsConstraintValid(asn1T_PFS_IWM_ARMING_RELAY_STATUS_ON* val, int* pErrCode);
flag asn1T_PFS_IWM_ARMING_RELAY_STATUS_ON_Encode(asn1T_PFS_IWM_ARMING_RELAY_STATUS_ON* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1T_PFS_IWM_ARMING_RELAY_STATUS_ON_Decode(asn1T_PFS_IWM_ARMING_RELAY_STATUS_ON* val, BitStream* pBitStrm, int* pErrCode);


typedef asn1MYBOOL asn1T_PFS_HLTC_RED_BUTTON_IS_ON;

#define asn1T_PFS_HLTC_RED_BUTTON_IS_ON_REQUIRED_BYTES_FOR_ENCODING		1


void asn1T_PFS_HLTC_RED_BUTTON_IS_ON_Initialize(asn1T_PFS_HLTC_RED_BUTTON_IS_ON* pVal);
flag asn1T_PFS_HLTC_RED_BUTTON_IS_ON_IsConstraintValid(asn1T_PFS_HLTC_RED_BUTTON_IS_ON* val, int* pErrCode);
flag asn1T_PFS_HLTC_RED_BUTTON_IS_ON_Encode(asn1T_PFS_HLTC_RED_BUTTON_IS_ON* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1T_PFS_HLTC_RED_BUTTON_IS_ON_Decode(asn1T_PFS_HLTC_RED_BUTTON_IS_ON* val, BitStream* pBitStrm, int* pErrCode);


typedef asn1MYBOOL asn1T_END_BOOST_IS_REACHED;

#define asn1T_END_BOOST_IS_REACHED_REQUIRED_BYTES_FOR_ENCODING		1


void asn1T_END_BOOST_IS_REACHED_Initialize(asn1T_END_BOOST_IS_REACHED* pVal);
flag asn1T_END_BOOST_IS_REACHED_IsConstraintValid(asn1T_END_BOOST_IS_REACHED* val, int* pErrCode);
flag asn1T_END_BOOST_IS_REACHED_Encode(asn1T_END_BOOST_IS_REACHED* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1T_END_BOOST_IS_REACHED_Decode(asn1T_END_BOOST_IS_REACHED* val, BitStream* pBitStrm, int* pErrCode);


typedef asn1MYBOOL asn1T_SUN_IS_AIMED;

#define asn1T_SUN_IS_AIMED_REQUIRED_BYTES_FOR_ENCODING		1


void asn1T_SUN_IS_AIMED_Initialize(asn1T_SUN_IS_AIMED* pVal);
flag asn1T_SUN_IS_AIMED_IsConstraintValid(asn1T_SUN_IS_AIMED* val, int* pErrCode);
flag asn1T_SUN_IS_AIMED_Encode(asn1T_SUN_IS_AIMED* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1T_SUN_IS_AIMED_Decode(asn1T_SUN_IS_AIMED* val, BitStream* pBitStrm, int* pErrCode);


typedef asn1MYBOOL asn1T_CONTROLLER_TO_BE_ACTIVATED;

#define asn1T_CONTROLLER_TO_BE_ACTIVATED_REQUIRED_BYTES_FOR_ENCODING		1


void asn1T_CONTROLLER_TO_BE_ACTIVATED_Initialize(asn1T_CONTROLLER_TO_BE_ACTIVATED* pVal);
flag asn1T_CONTROLLER_TO_BE_ACTIVATED_IsConstraintValid(asn1T_CONTROLLER_TO_BE_ACTIVATED* val, int* pErrCode);
flag asn1T_CONTROLLER_TO_BE_ACTIVATED_Encode(asn1T_CONTROLLER_TO_BE_ACTIVATED* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1T_CONTROLLER_TO_BE_ACTIVATED_Decode(asn1T_CONTROLLER_TO_BE_ACTIVATED* val, BitStream* pBitStrm, int* pErrCode);


typedef struct {
    asn1T_THRUSTERS_OPENING thrusters_opening;
} asn1T_CONTROL_UP_OUT;

#define asn1T_CONTROL_UP_OUT_REQUIRED_BYTES_FOR_ENCODING		6


void asn1T_CONTROL_UP_OUT_Initialize(asn1T_CONTROL_UP_OUT* pVal);
flag asn1T_CONTROL_UP_OUT_IsConstraintValid(asn1T_CONTROL_UP_OUT* val, int* pErrCode);
flag asn1T_CONTROL_UP_OUT_Encode(asn1T_CONTROL_UP_OUT* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1T_CONTROL_UP_OUT_Decode(asn1T_CONTROL_UP_OUT* val, BitStream* pBitStrm, int* pErrCode);


typedef struct {
    asn1T_END_BOOST_IS_REACHED end_boost_is_reached;
    asn1T_SUN_IS_AIMED sun_is_aimed;
} asn1T_CONTROL_DOWN_OUT;

#define asn1T_CONTROL_DOWN_OUT_REQUIRED_BYTES_FOR_ENCODING		1


void asn1T_CONTROL_DOWN_OUT_Initialize(asn1T_CONTROL_DOWN_OUT* pVal);
flag asn1T_CONTROL_DOWN_OUT_IsConstraintValid(asn1T_CONTROL_DOWN_OUT* val, int* pErrCode);
flag asn1T_CONTROL_DOWN_OUT_Encode(asn1T_CONTROL_DOWN_OUT* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1T_CONTROL_DOWN_OUT_Decode(asn1T_CONTROL_DOWN_OUT* val, BitStream* pBitStrm, int* pErrCode);


typedef struct {
    asn1T_ON_OFF_CMD set_cam_cmd_pde1;
    asn1T_ON_OFF_CMD set_cam_cmd_pde2;
    asn1T_ON_OFF_CMD set_cam_cmd_pde3;
    asn1T_ON_OFF_CMD set_cam_cmd_pde4;
} asn1T_CAM_CMD;

#define asn1T_CAM_CMD_REQUIRED_BYTES_FOR_ENCODING		1


void asn1T_CAM_CMD_Initialize(asn1T_CAM_CMD* pVal);
flag asn1T_CAM_CMD_IsConstraintValid(asn1T_CAM_CMD* val, int* pErrCode);
flag asn1T_CAM_CMD_Encode(asn1T_CAM_CMD* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1T_CAM_CMD_Decode(asn1T_CAM_CMD* val, BitStream* pBitStrm, int* pErrCode);


typedef struct {
    asn1T_REAL angular_rate_threshold;
    asn1T_INTEGER rdv_phase;
    struct {
        long nCount;
        asn1T_INTEGER arr[3];
    } boost_monitoring_opening_date;
    struct {
        long nCount;
        asn1T_REAL arr[3];
    } boost_threshold_dvx;
    struct {
        long nCount;
        asn1T_REAL arr[3];
    } boost_threshold_dvz;
    struct {
        long nCount;
        asn1T_INTEGER arr[3];
    } boost_monitoring_duration;
    struct {
        long nCount;
        asn1T_REAL arr[6];
    } acca_bias_estimation;
    asn1T_REAL zm_threshold_initial;
    asn1T_REAL zm_threshold_final;
    asn1T_REAL mc_threshold_initial;
    asn1T_REAL mc_threshold_final;
    asn1T_REAL zm_initial;
    asn1T_REAL zm_final;
    struct {
        long nCount;
        asn1T_REAL arr[12];
    } r_r_rate_threshold_curve;
    struct {
        long nCount;
        asn1T_REAL arr[3];
    } boost_intensities_dvx;
    struct {
        long nCount;
        asn1T_REAL arr[3];
    } boost_intensities_dvz;
    asn1T_VECTOR6 acca_lsb_value_acm;
    asn1T_VECTOR6 acca_bias_estimate;
    asn1T_VECTOR18 pseudo_inverse_acm;
    asn1T_VECTOR4 tgm_window_size;
    asn1T_VECTOR4 tgm_range_ref;
} asn1T_CM_CONFIGURATION;

#define asn1T_CM_CONFIGURATION_REQUIRED_BYTES_FOR_ENCODING		910

#define ERR_asn1T_CM_CONFIGURATION_angular_rate_threshold		1098 /* (-10000..10000) */
#define ERR_asn1T_CM_CONFIGURATION_rdv_phase		1099 /* (-1000..1000) */
#define ERR_asn1T_CM_CONFIGURATION_boost_monitoring_opening_date		1100 /* (SIZE (3)) */
#define ERR_asn1T_CM_CONFIGURATION_boost_monitoring_opening_date_elem		1101 /* (-1000..1000) */
#define ERR_asn1T_CM_CONFIGURATION_boost_threshold_dvx		1102 /* (SIZE (3)) */
#define ERR_asn1T_CM_CONFIGURATION_boost_threshold_dvx_elem		1103 /* (-10000..10000) */
#define ERR_asn1T_CM_CONFIGURATION_boost_threshold_dvz		1104 /* (SIZE (3)) */
#define ERR_asn1T_CM_CONFIGURATION_boost_threshold_dvz_elem		1105 /* (-10000..10000) */
#define ERR_asn1T_CM_CONFIGURATION_boost_monitoring_duration		1106 /* (SIZE (3)) */
#define ERR_asn1T_CM_CONFIGURATION_boost_monitoring_duration_elem		1107 /* (-1000..1000) */
#define ERR_asn1T_CM_CONFIGURATION_acca_bias_estimation		1108 /* (SIZE (6)) */
#define ERR_asn1T_CM_CONFIGURATION_acca_bias_estimation_elem		1109 /* (-10000..10000) */
#define ERR_asn1T_CM_CONFIGURATION_zm_threshold_initial		1110 /* (-10000..10000) */
#define ERR_asn1T_CM_CONFIGURATION_zm_threshold_final		1111 /* (-10000..10000) */
#define ERR_asn1T_CM_CONFIGURATION_mc_threshold_initial		1112 /* (-10000..10000) */
#define ERR_asn1T_CM_CONFIGURATION_mc_threshold_final		1113 /* (-10000..10000) */
#define ERR_asn1T_CM_CONFIGURATION_zm_initial		1114 /* (-10000..10000) */
#define ERR_asn1T_CM_CONFIGURATION_zm_final		1115 /* (-10000..10000) */
#define ERR_asn1T_CM_CONFIGURATION_r_r_rate_threshold_curve		1116 /* (SIZE (12)) */
#define ERR_asn1T_CM_CONFIGURATION_r_r_rate_threshold_curve_elem		1117 /* (-10000..10000) */
#define ERR_asn1T_CM_CONFIGURATION_boost_intensities_dvx		1118 /* (SIZE (3)) */
#define ERR_asn1T_CM_CONFIGURATION_boost_intensities_dvx_elem		1119 /* (-10000..10000) */
#define ERR_asn1T_CM_CONFIGURATION_boost_intensities_dvz		1120 /* (SIZE (3)) */
#define ERR_asn1T_CM_CONFIGURATION_boost_intensities_dvz_elem		1121 /* (-10000..10000) */
#define ERR_asn1T_CM_CONFIGURATION_acca_lsb_value_acm		1122 /* (SIZE (6)) */
#define ERR_asn1T_CM_CONFIGURATION_acca_bias_estimate		1123 /* (SIZE (6)) */
#define ERR_asn1T_CM_CONFIGURATION_pseudo_inverse_acm		1124 /* (SIZE (18)) */
#define ERR_asn1T_CM_CONFIGURATION_tgm_window_size		1125 /* (SIZE (4)) */
#define ERR_asn1T_CM_CONFIGURATION_tgm_range_ref		1126 /* (SIZE (4)) */

void asn1T_CM_CONFIGURATION_Initialize(asn1T_CM_CONFIGURATION* pVal);
flag asn1T_CM_CONFIGURATION_IsConstraintValid(asn1T_CM_CONFIGURATION* val, int* pErrCode);
flag asn1T_CM_CONFIGURATION_Encode(asn1T_CM_CONFIGURATION* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1T_CM_CONFIGURATION_Decode(asn1T_CM_CONFIGURATION* val, BitStream* pBitStrm, int* pErrCode);


typedef struct {
    asn1T_MASS atv_mass;
    asn1T_INERTIA inertia;
    asn1T_VECTOR3 center_of_mass;
    asn1T_INITIAL_EFFICIENCY_MATRIX initial_efficiency_matrix;
    asn1T_EFFICIENCY_MATRIX inverse_efficiency_matrix;
    asn1T_VELOCITY aimed_delta_v;
    asn1T_QUATERNION q_lof_to_atv_cam_inst;
    asn1T_QUATERNION q_j2000_to_atv_sasp_inst;
    asn1T_REAL orbital_pulsation;
} asn1T_CONTROLLER_CONFIG;

#define asn1T_CONTROLLER_CONFIG_REQUIRED_BYTES_FOR_ENCODING		600

#define ERR_asn1T_CONTROLLER_CONFIG_atv_mass		1127 /* (-10000..10000) */
#define ERR_asn1T_CONTROLLER_CONFIG_inertia		1128 /* (SIZE (3)) */
#define ERR_asn1T_CONTROLLER_CONFIG_center_of_mass		1129 /* (SIZE (3)) */
#define ERR_asn1T_CONTROLLER_CONFIG_initial_efficiency_matrix		1130 /* (SIZE (6)) */
#define ERR_asn1T_CONTROLLER_CONFIG_inverse_efficiency_matrix		1131 /* (SIZE (3)) */
#define ERR_asn1T_CONTROLLER_CONFIG_aimed_delta_v		1132 /* (-10000..10000) */
#define ERR_asn1T_CONTROLLER_CONFIG_q_lof_to_atv_cam_inst		1133 /* (SIZE (4)) */
#define ERR_asn1T_CONTROLLER_CONFIG_q_j2000_to_atv_sasp_inst		1134 /* (SIZE (4)) */
#define ERR_asn1T_CONTROLLER_CONFIG_orbital_pulsation		1135 /* (-10000..10000) */

void asn1T_CONTROLLER_CONFIG_Initialize(asn1T_CONTROLLER_CONFIG* pVal);
flag asn1T_CONTROLLER_CONFIG_IsConstraintValid(asn1T_CONTROLLER_CONFIG* val, int* pErrCode);
flag asn1T_CONTROLLER_CONFIG_Encode(asn1T_CONTROLLER_CONFIG* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1T_CONTROLLER_CONFIG_Decode(asn1T_CONTROLLER_CONFIG* val, BitStream* pBitStrm, int* pErrCode);


typedef struct {
    asn1T_MATRIX_3_4 input;
    asn1T_MATRIX_3_4 output;
} asn1T_CONTROLLER_FILTER_STATE;

#define asn1T_CONTROLLER_FILTER_STATE_REQUIRED_BYTES_FOR_ENCODING		288

#define ERR_asn1T_CONTROLLER_FILTER_STATE_input		1136 /* (SIZE (3)) */
#define ERR_asn1T_CONTROLLER_FILTER_STATE_output		1137 /* (SIZE (3)) */

void asn1T_CONTROLLER_FILTER_STATE_Initialize(asn1T_CONTROLLER_FILTER_STATE* pVal);
flag asn1T_CONTROLLER_FILTER_STATE_IsConstraintValid(asn1T_CONTROLLER_FILTER_STATE* val, int* pErrCode);
flag asn1T_CONTROLLER_FILTER_STATE_Encode(asn1T_CONTROLLER_FILTER_STATE* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1T_CONTROLLER_FILTER_STATE_Decode(asn1T_CONTROLLER_FILTER_STATE* val, BitStream* pBitStrm, int* pErrCode);


typedef struct {
    asn1T_QUATERNION q_lof_to_atv;
    asn1T_ANGULAR_RATE atv_abs_angular_rates;
    asn1T_ACCELERATION atv_disruptive_acceleration;
} asn1T_CONTROLLER_STATE;

#define asn1T_CONTROLLER_STATE_REQUIRED_BYTES_FOR_ENCODING		89

#define ERR_asn1T_CONTROLLER_STATE_q_lof_to_atv		1138 /* (SIZE (4)) */
#define ERR_asn1T_CONTROLLER_STATE_atv_disruptive_acceleration		1139 /* (SIZE (3)) */

void asn1T_CONTROLLER_STATE_Initialize(asn1T_CONTROLLER_STATE* pVal);
flag asn1T_CONTROLLER_STATE_IsConstraintValid(asn1T_CONTROLLER_STATE* val, int* pErrCode);
flag asn1T_CONTROLLER_STATE_Encode(asn1T_CONTROLLER_STATE* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1T_CONTROLLER_STATE_Decode(asn1T_CONTROLLER_STATE* val, BitStream* pBitStrm, int* pErrCode);


typedef struct {
    asn1T_VELOCITY estimated_delta_v;
    asn1T_THRUSTERS_OPENING thrusters_opening;
    asn1T_REAL estimated_atv_quaternion_1;
    asn1T_REAL estimated_atv_quaternion_2;
    asn1T_REAL estimated_atv_quaternion_3;
} asn1T_CONTROLLER_TELEMETRY;

#define asn1T_CONTROLLER_TELEMETRY_REQUIRED_BYTES_FOR_ENCODING		54

#define ERR_asn1T_CONTROLLER_TELEMETRY_estimated_delta_v		1140 /* (-10000..10000) */
#define ERR_asn1T_CONTROLLER_TELEMETRY_estimated_atv_quaternion_1		1141 /* (-10000..10000) */
#define ERR_asn1T_CONTROLLER_TELEMETRY_estimated_atv_quaternion_2		1142 /* (-10000..10000) */
#define ERR_asn1T_CONTROLLER_TELEMETRY_estimated_atv_quaternion_3		1143 /* (-10000..10000) */

void asn1T_CONTROLLER_TELEMETRY_Initialize(asn1T_CONTROLLER_TELEMETRY* pVal);
flag asn1T_CONTROLLER_TELEMETRY_IsConstraintValid(asn1T_CONTROLLER_TELEMETRY* val, int* pErrCode);
flag asn1T_CONTROLLER_TELEMETRY_Encode(asn1T_CONTROLLER_TELEMETRY* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1T_CONTROLLER_TELEMETRY_Decode(asn1T_CONTROLLER_TELEMETRY* val, BitStream* pBitStrm, int* pErrCode);


typedef struct {
    flag  power_sensor_enable;
    flag  output_sensor_enable;
    flag  flag_dtg1_power_enabled;
    flag  flag_dtg2_power_enabled;
    flag  flag_lcl_status_pde1;
    flag  flag_lcl_status_pde2;
    flag  flag_lcl_status_pde3;
    flag  flag_lcl_status_pde4;
    flag  flag_hlct_red_button_from_cpf1;
    flag  flag_hlct_red_button_from_cpf2;
    asn1T_PFS_EWM_MSU_MSU_HS pfs_ewm_msuy_msux_hs;
    flag  flag_hltc_disarm_from_cpf1;
    flag  flag_hltc_disarm_from_cpf2;
    flag  flag_hltc_arm_from_cpf1;
    flag  flag_hltc_arm_from_cpf2;
    flag  flag_pde_power_sensor;
    flag  flag_aux_bat_sensor;
} asn1T_HW_STATUSES;

#define asn1T_HW_STATUSES_REQUIRED_BYTES_FOR_ENCODING		3


void asn1T_HW_STATUSES_Initialize(asn1T_HW_STATUSES* pVal);
flag asn1T_HW_STATUSES_IsConstraintValid(asn1T_HW_STATUSES* val, int* pErrCode);
flag asn1T_HW_STATUSES_Encode(asn1T_HW_STATUSES* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1T_HW_STATUSES_Decode(asn1T_HW_STATUSES* val, BitStream* pBitStrm, int* pErrCode);


typedef struct {
    asn1T_QUATERNION q_lof_to_atv_cam_inst;
    asn1T_QUATERNION q_j2000_to_atv_sasp_inst;
    asn1T_REAL orbital_pulsation;
    asn1T_QUATERNION q_j2000_to_ocf;
    asn1T_QUATERNION q_j2000_to_atv;
    asn1T_VECTOR4 coarse_drift_msu;
    asn1T_VECTOR4 fine_drift_msu;
    asn1T_VECTOR8 dtg_lsb_value_msu;
    asn1T_REAL dtg_fd_fine_threshold;
    asn1T_REAL dtg_fd_coarse_threshold;
    asn1T_VECTOR12 ssu_calib_data_msu;
    asn1T_VECTOR9 true_ssu_axis_to_atv;
    asn1T_VECTOR12 true_dtg_axis_to_atv_msu;
    asn1T_VECTOR4 estimated_flight_drifts_config;
} asn1T_NAVIGATION_CONFIGURATION;

#define asn1T_NAVIGATION_CONFIGURATION_REQUIRED_BYTES_FOR_ENCODING		864

#define ERR_asn1T_NAVIGATION_CONFIGURATION_q_lof_to_atv_cam_inst		1144 /* (SIZE (4)) */
#define ERR_asn1T_NAVIGATION_CONFIGURATION_q_j2000_to_atv_sasp_inst		1145 /* (SIZE (4)) */
#define ERR_asn1T_NAVIGATION_CONFIGURATION_orbital_pulsation		1146 /* (-10000..10000) */
#define ERR_asn1T_NAVIGATION_CONFIGURATION_q_j2000_to_ocf		1147 /* (SIZE (4)) */
#define ERR_asn1T_NAVIGATION_CONFIGURATION_q_j2000_to_atv		1148 /* (SIZE (4)) */
#define ERR_asn1T_NAVIGATION_CONFIGURATION_coarse_drift_msu		1149 /* (SIZE (4)) */
#define ERR_asn1T_NAVIGATION_CONFIGURATION_fine_drift_msu		1150 /* (SIZE (4)) */
#define ERR_asn1T_NAVIGATION_CONFIGURATION_dtg_lsb_value_msu		1151 /* (SIZE (8)) */
#define ERR_asn1T_NAVIGATION_CONFIGURATION_dtg_fd_fine_threshold		1152 /* (-10000..10000) */
#define ERR_asn1T_NAVIGATION_CONFIGURATION_dtg_fd_coarse_threshold		1153 /* (-10000..10000) */
#define ERR_asn1T_NAVIGATION_CONFIGURATION_ssu_calib_data_msu		1154 /* (SIZE (12)) */
#define ERR_asn1T_NAVIGATION_CONFIGURATION_true_ssu_axis_to_atv		1155 /* (SIZE (9)) */
#define ERR_asn1T_NAVIGATION_CONFIGURATION_true_dtg_axis_to_atv_msu		1156 /* (SIZE (12)) */
#define ERR_asn1T_NAVIGATION_CONFIGURATION_estimated_flight_drifts_config		1157 /* (SIZE (4)) */

void asn1T_NAVIGATION_CONFIGURATION_Initialize(asn1T_NAVIGATION_CONFIGURATION* pVal);
flag asn1T_NAVIGATION_CONFIGURATION_IsConstraintValid(asn1T_NAVIGATION_CONFIGURATION* val, int* pErrCode);
flag asn1T_NAVIGATION_CONFIGURATION_Encode(asn1T_NAVIGATION_CONFIGURATION* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1T_NAVIGATION_CONFIGURATION_Decode(asn1T_NAVIGATION_CONFIGURATION* val, BitStream* pBitStrm, int* pErrCode);


typedef struct {
    asn1T_QUATERNION q_j2000_to_atv_nav;
    asn1T_QUATERNION q_lof_to_atv_nav;
    asn1T_ANGULAR_RATE atv_abs_ang_rate_nav;
} asn1T_NAVIGATION_OUTPUT;

#define asn1T_NAVIGATION_OUTPUT_REQUIRED_BYTES_FOR_ENCODING		101

#define ERR_asn1T_NAVIGATION_OUTPUT_q_j2000_to_atv_nav		1158 /* (SIZE (4)) */
#define ERR_asn1T_NAVIGATION_OUTPUT_q_lof_to_atv_nav		1159 /* (SIZE (4)) */

void asn1T_NAVIGATION_OUTPUT_Initialize(asn1T_NAVIGATION_OUTPUT* pVal);
flag asn1T_NAVIGATION_OUTPUT_IsConstraintValid(asn1T_NAVIGATION_OUTPUT* val, int* pErrCode);
flag asn1T_NAVIGATION_OUTPUT_Encode(asn1T_NAVIGATION_OUTPUT* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1T_NAVIGATION_OUTPUT_Decode(asn1T_NAVIGATION_OUTPUT* val, BitStream* pBitStrm, int* pErrCode);


typedef struct {
    asn1T_QUATERNION q_j2000_to_atv;
    asn1T_QUATERNION q_lof_to_atv;
    asn1T_QUATERNION q_j2000_to_atv_unconfir;
    asn1T_QUATERNION q_lof_to_atv_unconfir;
} asn1T_NAVIGATION_STATE;

#define asn1T_NAVIGATION_STATE_REQUIRED_BYTES_FOR_ENCODING		192

#define ERR_asn1T_NAVIGATION_STATE_q_j2000_to_atv		1160 /* (SIZE (4)) */
#define ERR_asn1T_NAVIGATION_STATE_q_lof_to_atv		1161 /* (SIZE (4)) */
#define ERR_asn1T_NAVIGATION_STATE_q_j2000_to_atv_unconfir		1162 /* (SIZE (4)) */
#define ERR_asn1T_NAVIGATION_STATE_q_lof_to_atv_unconfir		1163 /* (SIZE (4)) */

void asn1T_NAVIGATION_STATE_Initialize(asn1T_NAVIGATION_STATE* pVal);
flag asn1T_NAVIGATION_STATE_IsConstraintValid(asn1T_NAVIGATION_STATE* val, int* pErrCode);
flag asn1T_NAVIGATION_STATE_Encode(asn1T_NAVIGATION_STATE* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1T_NAVIGATION_STATE_Decode(asn1T_NAVIGATION_STATE* val, BitStream* pBitStrm, int* pErrCode);


typedef struct {
    flag  pfs_dtg_is_failed;
    asn1T_ANGLE alpha_ssu;
    asn1T_ANGLE beta_ssu;
    asn1T_NAVIGATION_OUTPUT navigation_output;
} asn1T_NAVIGATION_TELEMETRY;

#define asn1T_NAVIGATION_TELEMETRY_REQUIRED_BYTES_FOR_ENCODING		125

#define ERR_asn1T_NAVIGATION_TELEMETRY_alpha_ssu		1164 /* (-10000..10000) */
#define ERR_asn1T_NAVIGATION_TELEMETRY_beta_ssu		1165 /* (-10000..10000) */

void asn1T_NAVIGATION_TELEMETRY_Initialize(asn1T_NAVIGATION_TELEMETRY* pVal);
flag asn1T_NAVIGATION_TELEMETRY_IsConstraintValid(asn1T_NAVIGATION_TELEMETRY* val, int* pErrCode);
flag asn1T_NAVIGATION_TELEMETRY_Encode(asn1T_NAVIGATION_TELEMETRY* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1T_NAVIGATION_TELEMETRY_Decode(asn1T_NAVIGATION_TELEMETRY* val, BitStream* pBitStrm, int* pErrCode);


typedef struct {
    long nCount;
    asn1INTEGER16 arr[32];
} asn1T_PFS_BUS_DATA_BLOCK;

#define asn1T_PFS_BUS_DATA_BLOCK_REQUIRED_BYTES_FOR_ENCODING		44

#define ERR_asn1T_PFS_BUS_DATA_BLOCK		1166 /* (SIZE (32)) */
#define ERR_asn1T_PFS_BUS_DATA_BLOCK_elem		1167 /* (-1000..1000) */

void asn1T_PFS_BUS_DATA_BLOCK_Initialize(asn1T_PFS_BUS_DATA_BLOCK* pVal);
flag asn1T_PFS_BUS_DATA_BLOCK_IsConstraintValid(asn1T_PFS_BUS_DATA_BLOCK* val, int* pErrCode);
flag asn1T_PFS_BUS_DATA_BLOCK_Encode(asn1T_PFS_BUS_DATA_BLOCK* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1T_PFS_BUS_DATA_BLOCK_Decode(asn1T_PFS_BUS_DATA_BLOCK* val, BitStream* pBitStrm, int* pErrCode);


typedef struct {
    asn1T_PFS_TGM_DATA pfs_tgm1_data;
    asn1T_PFS_TGM_DATA pfs_tgm2_data;
    asn1T_PFS_ACM_DATA pfs_acm1_data;
    asn1T_PFS_ACM_DATA pfs_acm2_data;
    asn1T_PFS_ACM_DATA pfs_acm3_data;
} asn1T_PFS_BUS_SENSOR_DATA;

#define asn1T_PFS_BUS_SENSOR_DATA_REQUIRED_BYTES_FOR_ENCODING		32


void asn1T_PFS_BUS_SENSOR_DATA_Initialize(asn1T_PFS_BUS_SENSOR_DATA* pVal);
flag asn1T_PFS_BUS_SENSOR_DATA_IsConstraintValid(asn1T_PFS_BUS_SENSOR_DATA* val, int* pErrCode);
flag asn1T_PFS_BUS_SENSOR_DATA_Encode(asn1T_PFS_BUS_SENSOR_DATA* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1T_PFS_BUS_SENSOR_DATA_Decode(asn1T_PFS_BUS_SENSOR_DATA* val, BitStream* pBitStrm, int* pErrCode);


typedef struct {
    asn1T_PFS_EWM_DTG_MSU_MODE dtg1_mode;
    asn1T_PFS_EWM_DTG_MSU_MODE dtg2_mode;
} asn1T_PFS_EWM_DTG12_MSU_MODE;

#define asn1T_PFS_EWM_DTG12_MSU_MODE_REQUIRED_BYTES_FOR_ENCODING		1


void asn1T_PFS_EWM_DTG12_MSU_MODE_Initialize(asn1T_PFS_EWM_DTG12_MSU_MODE* pVal);
flag asn1T_PFS_EWM_DTG12_MSU_MODE_IsConstraintValid(asn1T_PFS_EWM_DTG12_MSU_MODE* val, int* pErrCode);
flag asn1T_PFS_EWM_DTG12_MSU_MODE_Encode(asn1T_PFS_EWM_DTG12_MSU_MODE* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1T_PFS_EWM_DTG12_MSU_MODE_Decode(asn1T_PFS_EWM_DTG12_MSU_MODE* val, BitStream* pBitStrm, int* pErrCode);


typedef struct {
    asn1T_PFS_EWM_DTG_MSU_MODE pfs_ewm_dtg_msu_mode;
    asn1T_INTEGER pfs_ewm_dtg_msu_axis1;
    asn1T_INTEGER pfs_ewm_dtg_msu_axis2;
} asn1T_PFS_EWM_DTG_MSU;

#define asn1T_PFS_EWM_DTG_MSU_REQUIRED_BYTES_FOR_ENCODING		3

#define ERR_asn1T_PFS_EWM_DTG_MSU_pfs_ewm_dtg_msu_axis1		1168 /* (-1000..1000) */
#define ERR_asn1T_PFS_EWM_DTG_MSU_pfs_ewm_dtg_msu_axis2		1169 /* (-1000..1000) */

void asn1T_PFS_EWM_DTG_MSU_Initialize(asn1T_PFS_EWM_DTG_MSU* pVal);
flag asn1T_PFS_EWM_DTG_MSU_IsConstraintValid(asn1T_PFS_EWM_DTG_MSU* val, int* pErrCode);
flag asn1T_PFS_EWM_DTG_MSU_Encode(asn1T_PFS_EWM_DTG_MSU* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1T_PFS_EWM_DTG_MSU_Decode(asn1T_PFS_EWM_DTG_MSU* val, BitStream* pBitStrm, int* pErrCode);


typedef struct {
    asn1T_VOLTAGE pfs_iwm_voltage_cpu;
    asn1T_VOLTAGE pfs_iwm_voltage_pos;
    asn1T_VOLTAGE pfs_iwm_voltage_neg;
    asn1T_VOLTAGE pfs_iwm_voltage_bat;
    asn1T_CURRENT pfs_ewm_current_ssu1;
    asn1T_CURRENT pfs_ewm_current_ssu2;
    asn1T_CURRENT pfs_ewm_current_ssu3;
    asn1T_CURRENT pfs_ewm_current_ssu4;
    asn1T_CURRENT pfs_iwm_current_pde1;
    asn1T_CURRENT pfs_iwm_current_pde2;
    asn1T_CURRENT pfs_iwm_current_pde3;
    asn1T_CURRENT pfs_iwm_current_pde4;
    asn1T_CURRENT pfs_iwm_current_prim;
    asn1T_VOLTAGE pfs_iwm_voltage_prim;
    asn1T_TEMP pfs_iwm_temp_msu;
    asn1T_TEMP pfs_iwm_temp_gyro;
} asn1T_PFS_IWM_MEASUREMENTS;

#define asn1T_PFS_IWM_MEASUREMENTS_REQUIRED_BYTES_FOR_ENCODING		192

#define ERR_asn1T_PFS_IWM_MEASUREMENTS_pfs_iwm_voltage_cpu		1170 /* (-10000..10000) */
#define ERR_asn1T_PFS_IWM_MEASUREMENTS_pfs_iwm_voltage_pos		1171 /* (-10000..10000) */
#define ERR_asn1T_PFS_IWM_MEASUREMENTS_pfs_iwm_voltage_neg		1172 /* (-10000..10000) */
#define ERR_asn1T_PFS_IWM_MEASUREMENTS_pfs_iwm_voltage_bat		1173 /* (-10000..10000) */
#define ERR_asn1T_PFS_IWM_MEASUREMENTS_pfs_ewm_current_ssu1		1174 /* (-10000..10000) */
#define ERR_asn1T_PFS_IWM_MEASUREMENTS_pfs_ewm_current_ssu2		1175 /* (-10000..10000) */
#define ERR_asn1T_PFS_IWM_MEASUREMENTS_pfs_ewm_current_ssu3		1176 /* (-10000..10000) */
#define ERR_asn1T_PFS_IWM_MEASUREMENTS_pfs_ewm_current_ssu4		1177 /* (-10000..10000) */
#define ERR_asn1T_PFS_IWM_MEASUREMENTS_pfs_iwm_current_pde1		1178 /* (-10000..10000) */
#define ERR_asn1T_PFS_IWM_MEASUREMENTS_pfs_iwm_current_pde2		1179 /* (-10000..10000) */
#define ERR_asn1T_PFS_IWM_MEASUREMENTS_pfs_iwm_current_pde3		1180 /* (-10000..10000) */
#define ERR_asn1T_PFS_IWM_MEASUREMENTS_pfs_iwm_current_pde4		1181 /* (-10000..10000) */
#define ERR_asn1T_PFS_IWM_MEASUREMENTS_pfs_iwm_current_prim		1182 /* (-10000..10000) */
#define ERR_asn1T_PFS_IWM_MEASUREMENTS_pfs_iwm_voltage_prim		1183 /* (-10000..10000) */
#define ERR_asn1T_PFS_IWM_MEASUREMENTS_pfs_iwm_temp_msu		1184 /* (-10000..10000) */
#define ERR_asn1T_PFS_IWM_MEASUREMENTS_pfs_iwm_temp_gyro		1185 /* (-10000..10000) */

void asn1T_PFS_IWM_MEASUREMENTS_Initialize(asn1T_PFS_IWM_MEASUREMENTS* pVal);
flag asn1T_PFS_IWM_MEASUREMENTS_IsConstraintValid(asn1T_PFS_IWM_MEASUREMENTS* val, int* pErrCode);
flag asn1T_PFS_IWM_MEASUREMENTS_Encode(asn1T_PFS_IWM_MEASUREMENTS* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1T_PFS_IWM_MEASUREMENTS_Decode(asn1T_PFS_IWM_MEASUREMENTS* val, BitStream* pBitStrm, int* pErrCode);


typedef struct {
    asn1T_ON_OFF_CMD set_pfs_iwc_cam_trig1;
    asn1T_CAM_CMD pfs_iwc_pde_cam_trig2;
    asn1T_CAM_CMD pfs_ewc_msu_pde_cmd1;
    asn1T_CAM_CMD pfs_ewc_msu_pde_cmd2;
} asn1T_PDE_CMD_A;

#define asn1T_PDE_CMD_A_REQUIRED_BYTES_FOR_ENCODING		4


void asn1T_PDE_CMD_A_Initialize(asn1T_PDE_CMD_A* pVal);
flag asn1T_PDE_CMD_A_IsConstraintValid(asn1T_PDE_CMD_A* val, int* pErrCode);
flag asn1T_PDE_CMD_A_Encode(asn1T_PDE_CMD_A* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1T_PDE_CMD_A_Decode(asn1T_PDE_CMD_A* val, BitStream* pBitStrm, int* pErrCode);


typedef struct {
    asn1T_CAM_MODE cam_mode;
    asn1T_CONTROLLER_TO_BE_ACTIVATED controller_to_be_activated;
    asn1T_NAVIGATION_OUTPUT navigation_output;
} asn1T_CONTROL_IN;

#define asn1T_CONTROL_IN_REQUIRED_BYTES_FOR_ENCODING		101


void asn1T_CONTROL_IN_Initialize(asn1T_CONTROL_IN* pVal);
flag asn1T_CONTROL_IN_IsConstraintValid(asn1T_CONTROL_IN* val, int* pErrCode);
flag asn1T_CONTROL_IN_Encode(asn1T_CONTROL_IN* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1T_CONTROL_IN_Decode(asn1T_CONTROL_IN* val, BitStream* pBitStrm, int* pErrCode);


typedef struct {
    asn1T_PFS_BUS_DATA_BLOCK synchro_block;
    asn1T_PFS_BUS_DATA_BLOCK tc_block1;
    asn1T_PFS_BUS_DATA_BLOCK tc_block2;
    asn1T_PFS_BUS_DATA_BLOCK tc_block3;
    asn1T_PFS_BUS_DATA_BLOCK tc_block4;
    asn1T_PFS_BUS_DATA_BLOCK tc_block5;
    asn1T_PFS_BUS_DATA_BLOCK tc_block6;
    asn1T_PFS_BUS_DATA_BLOCK tc_block7;
    asn1T_PFS_BUS_DATA_BLOCK tc_block8;
    asn1T_PFS_BUS_DATA_BLOCK tc_block9;
    asn1T_PFS_BUS_DATA_BLOCK tc_block0;
    asn1T_PFS_BUS_DATA_BLOCK acm_block;
    asn1T_PFS_BUS_DATA_BLOCK tgm_block1;
} asn1T_PFS_1BUS_DATA;

#define asn1T_PFS_1BUS_DATA_REQUIRED_BYTES_FOR_ENCODING		572

#define ERR_asn1T_PFS_1BUS_DATA_synchro_block		1186 /* (SIZE (32)) */
#define ERR_asn1T_PFS_1BUS_DATA_tc_block1		1187 /* (SIZE (32)) */
#define ERR_asn1T_PFS_1BUS_DATA_tc_block2		1188 /* (SIZE (32)) */
#define ERR_asn1T_PFS_1BUS_DATA_tc_block3		1189 /* (SIZE (32)) */
#define ERR_asn1T_PFS_1BUS_DATA_tc_block4		1190 /* (SIZE (32)) */
#define ERR_asn1T_PFS_1BUS_DATA_tc_block5		1191 /* (SIZE (32)) */
#define ERR_asn1T_PFS_1BUS_DATA_tc_block6		1192 /* (SIZE (32)) */
#define ERR_asn1T_PFS_1BUS_DATA_tc_block7		1193 /* (SIZE (32)) */
#define ERR_asn1T_PFS_1BUS_DATA_tc_block8		1194 /* (SIZE (32)) */
#define ERR_asn1T_PFS_1BUS_DATA_tc_block9		1195 /* (SIZE (32)) */
#define ERR_asn1T_PFS_1BUS_DATA_tc_block0		1196 /* (SIZE (32)) */
#define ERR_asn1T_PFS_1BUS_DATA_acm_block		1197 /* (SIZE (32)) */
#define ERR_asn1T_PFS_1BUS_DATA_tgm_block1		1198 /* (SIZE (32)) */

void asn1T_PFS_1BUS_DATA_Initialize(asn1T_PFS_1BUS_DATA* pVal);
flag asn1T_PFS_1BUS_DATA_IsConstraintValid(asn1T_PFS_1BUS_DATA* val, int* pErrCode);
flag asn1T_PFS_1BUS_DATA_Encode(asn1T_PFS_1BUS_DATA* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1T_PFS_1BUS_DATA_Decode(asn1T_PFS_1BUS_DATA* val, BitStream* pBitStrm, int* pErrCode);


typedef struct {
    asn1T_PFS_1BUS_DATA pfs_bus1_data;
    asn1T_PFS_1BUS_DATA pfs_bus2_data;
    asn1T_PFS_1BUS_DATA pfs_bus3_data;
    asn1T_PFS_1BUS_DATA pfs_bus4_data;
} asn1T_PFS_BUS_DATA;

#define asn1T_PFS_BUS_DATA_REQUIRED_BYTES_FOR_ENCODING		2288


void asn1T_PFS_BUS_DATA_Initialize(asn1T_PFS_BUS_DATA* pVal);
flag asn1T_PFS_BUS_DATA_IsConstraintValid(asn1T_PFS_BUS_DATA* val, int* pErrCode);
flag asn1T_PFS_BUS_DATA_Encode(asn1T_PFS_BUS_DATA* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1T_PFS_BUS_DATA_Decode(asn1T_PFS_BUS_DATA* val, BitStream* pBitStrm, int* pErrCode);


typedef struct {
    asn1T_PFS_EWM_DTG_MSU pfs_ewm_dtg1_msu;
    asn1T_PFS_EWM_DTG_MSU pfs_ewm_dtg2_msu;
} asn1T_PFS_EWM_DTG12_MSU;

#define asn1T_PFS_EWM_DTG12_MSU_REQUIRED_BYTES_FOR_ENCODING		6


void asn1T_PFS_EWM_DTG12_MSU_Initialize(asn1T_PFS_EWM_DTG12_MSU* pVal);
flag asn1T_PFS_EWM_DTG12_MSU_IsConstraintValid(asn1T_PFS_EWM_DTG12_MSU* val, int* pErrCode);
flag asn1T_PFS_EWM_DTG12_MSU_Encode(asn1T_PFS_EWM_DTG12_MSU* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1T_PFS_EWM_DTG12_MSU_Decode(asn1T_PFS_EWM_DTG12_MSU* val, BitStream* pBitStrm, int* pErrCode);


typedef struct {
    flag  state_is_pfs_m_stdby;
    flag  state_is_pfs_m_ready_for_cam;
    flag  state_is_pfs_m_cam_in_waiting;
    flag  state_is_pfs_m_cam_prgs;
    flag  state_is_pfs_m_cam_inhib;
    flag  msu_failed_has_been_detected;
    asn1T_CAM_MODE cam_mode;
    flag  cam_test2_is_enabled;
    flag  autocam_is_enabled;
    flag  first_config_has_been_received;
    asn1T_CONFIGURATION_TABLE current_configuration_table;
    asn1T_CONFIGURATION_TABLE buffered_configuration_table;
    asn1T_MSU_STATUS msu_status;
    flag  msu_hs_is_ok;
    flag  pfs_iwm_arming_relay_status_on;
    asn1T_NAVIGATION_TELEMETRY navigation_telemetry;
    asn1T_CONTROLLER_TELEMETRY controller_telemetry;
    asn1T_CM_TELEMETRY cm_telemetry;
    asn1T_OBUT msu_obut;
    asn1T_SYNCHRO_BROADCAST_STATUS synchro_broadcast_status;
    asn1T_HW_STATUSES hw_statuses;
    asn1T_SW_WARNING_CODE sw_warning_code;
    asn1T_FTCP_HEALTH_STATUS ftcp_health_status;
    asn1T_INTEGER bit_result;
    asn1T_MSU_ID msu_id;
    flag  cm_auto_cam_cmd_is_requested;
    flag  cpu_overload_status;
    flag  pfs_ewm_ssu_msu_is_available;
    flag  controller_to_be_activated;
    flag  msu_online_bit_status_is_ok;
    asn1T_PFS_EWM_DTG12_MSU pfs_ewm_dtg12_msu;
    flag  new_config_is_available;
    flag  new_config_is_confirmed;
    asn1T_PFS_IWM_MEASUREMENTS pfs_iwm_measurements;
    asn1T_POWER_CONSUMPTION power_consumption;
} asn1T_MSU_TELEMETRY;

#define asn1T_MSU_TELEMETRY_REQUIRED_BYTES_FOR_ENCODING		445

#define ERR_asn1T_MSU_TELEMETRY_msu_obut		1199 /* (-1000..1000) */
#define ERR_asn1T_MSU_TELEMETRY_synchro_broadcast_status		1200 /* (SIZE (4)) */
#define ERR_asn1T_MSU_TELEMETRY_sw_warning_code		1201 /* (-1000..1000) */
#define ERR_asn1T_MSU_TELEMETRY_bit_result		1202 /* (-1000..1000) */
#define ERR_asn1T_MSU_TELEMETRY_msu_id		1203 /* (-1000..1000) */
#define ERR_asn1T_MSU_TELEMETRY_power_consumption		1204 /* (-10000..10000) */

void asn1T_MSU_TELEMETRY_Initialize(asn1T_MSU_TELEMETRY* pVal);
flag asn1T_MSU_TELEMETRY_IsConstraintValid(asn1T_MSU_TELEMETRY* val, int* pErrCode);
flag asn1T_MSU_TELEMETRY_Encode(asn1T_MSU_TELEMETRY* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1T_MSU_TELEMETRY_Decode(asn1T_MSU_TELEMETRY* val, BitStream* pBitStrm, int* pErrCode);


#ifdef  __cplusplus
}
#endif

#endif
