#ifndef _INC_SAMPLE1_H
#define _INC_SAMPLE1_H
/*
Code automatically generated by asn1cc tool
*/

#include "asn1crt.h"

#ifdef  __cplusplus
extern "C" {
#endif

typedef flag  MYBOOL;

#define MYBOOL_REQUIRED_BYTES_FOR_ENCODING		1


void MYBOOL_Initialize(MYBOOL* pVal);
flag MYBOOL_IsConstraintValid(MYBOOL* val, int* pErrCode);
flag MYBOOL_Encode(MYBOOL* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag MYBOOL_Decode(MYBOOL* val, BitStream* pBitStrm, int* pErrCode);


typedef asn1SccSint  T_INTEGER;

#define T_INTEGER_REQUIRED_BYTES_FOR_ENCODING		2

#define ERR_T_INTEGER		1000 /* (-1000..1000) */

void T_INTEGER_Initialize(T_INTEGER* pVal);
flag T_INTEGER_IsConstraintValid(T_INTEGER* val, int* pErrCode);
flag T_INTEGER_Encode(T_INTEGER* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag T_INTEGER_Decode(T_INTEGER* val, BitStream* pBitStrm, int* pErrCode);


typedef double T_REAL;

#define T_REAL_REQUIRED_BYTES_FOR_ENCODING		13

#define ERR_T_REAL		1001 /* (-10000..10000) */

void T_REAL_Initialize(T_REAL* pVal);
flag T_REAL_IsConstraintValid(T_REAL* val, int* pErrCode);
flag T_REAL_Encode(T_REAL* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag T_REAL_Decode(T_REAL* val, BitStream* pBitStrm, int* pErrCode);


typedef struct {
    long nCount;
    T_REAL arr[3];
} T_ACCELERATION;

#define T_ACCELERATION_REQUIRED_BYTES_FOR_ENCODING		40

#define ERR_T_ACCELERATION		1002 /* (SIZE (0..3)) */
#define ERR_T_ACCELERATION_elem		1003 /* (-10000..10000) */

void T_ACCELERATION_Initialize(T_ACCELERATION* pVal);
flag T_ACCELERATION_IsConstraintValid(T_ACCELERATION* val, int* pErrCode);
flag T_ACCELERATION_Encode(T_ACCELERATION* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag T_ACCELERATION_Decode(T_ACCELERATION* val, BitStream* pBitStrm, int* pErrCode);


typedef struct {
    flag  set_acs1_cmd;
    flag  set_acs2_cmd;
} T_ACS_CMD;

#define T_ACS_CMD_REQUIRED_BYTES_FOR_ENCODING		1


void T_ACS_CMD_Initialize(T_ACS_CMD* pVal);
flag T_ACS_CMD_IsConstraintValid(T_ACS_CMD* val, int* pErrCode);
flag T_ACS_CMD_Encode(T_ACS_CMD* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag T_ACS_CMD_Decode(T_ACS_CMD* val, BitStream* pBitStrm, int* pErrCode);


typedef T_REAL T_ANGLE;

#define T_ANGLE_REQUIRED_BYTES_FOR_ENCODING		13

#define ERR_T_ANGLE		1004 /* (-10000..10000) */

void T_ANGLE_Initialize(T_ANGLE* pVal);
flag T_ANGLE_IsConstraintValid(T_ANGLE* val, int* pErrCode);
flag T_ANGLE_Encode(T_ANGLE* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag T_ANGLE_Decode(T_ANGLE* val, BitStream* pBitStrm, int* pErrCode);


typedef struct {
    T_INTEGER p_rate;
    T_INTEGER q_rate;
    T_INTEGER r_rate;
} T_ANGULAR_RATE;

#define T_ANGULAR_RATE_REQUIRED_BYTES_FOR_ENCODING		5

#define ERR_T_ANGULAR_RATE_p_rate		1005 /* (-1000..1000) */
#define ERR_T_ANGULAR_RATE_q_rate		1006 /* (-1000..1000) */
#define ERR_T_ANGULAR_RATE_r_rate		1007 /* (-1000..1000) */

void T_ANGULAR_RATE_Initialize(T_ANGULAR_RATE* pVal);
flag T_ANGULAR_RATE_IsConstraintValid(T_ANGULAR_RATE* val, int* pErrCode);
flag T_ANGULAR_RATE_Encode(T_ANGULAR_RATE* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag T_ANGULAR_RATE_Decode(T_ANGULAR_RATE* val, BitStream* pBitStrm, int* pErrCode);


typedef struct {
    struct {
        long nCount;
        flag  arr[4];
    } cm_statuses;
    T_INTEGER acm_status;
    T_INTEGER tgm_status;
    T_INTEGER mcm_phase;
    T_INTEGER obm_mode;
    struct {
        long nCount;
        T_INTEGER arr[2];
    } alarm_counters;
    struct {
        long nCount;
        T_INTEGER arr[6];
    } internal_rates;
    T_REAL radial_velocity;
    T_REAL longitudinal_velocity;
} T_CM_TELEMETRY;

#define T_CM_TELEMETRY_REQUIRED_BYTES_FOR_ENCODING		44

#define ERR_T_CM_TELEMETRY_cm_statuses		1008 /* (SIZE (0..4)) */
#define ERR_T_CM_TELEMETRY_acm_status		1009 /* (-1000..1000) */
#define ERR_T_CM_TELEMETRY_tgm_status		1010 /* (-1000..1000) */
#define ERR_T_CM_TELEMETRY_mcm_phase		1011 /* (-1000..1000) */
#define ERR_T_CM_TELEMETRY_obm_mode		1012 /* (-1000..1000) */
#define ERR_T_CM_TELEMETRY_alarm_counters		1013 /* (SIZE (0..2)) */
#define ERR_T_CM_TELEMETRY_alarm_counters_elem		1014 /* (-1000..1000) */
#define ERR_T_CM_TELEMETRY_internal_rates		1015 /* (SIZE (0..6)) */
#define ERR_T_CM_TELEMETRY_internal_rates_elem		1016 /* (-1000..1000) */
#define ERR_T_CM_TELEMETRY_radial_velocity		1017 /* (-10000..10000) */
#define ERR_T_CM_TELEMETRY_longitudinal_velocity		1018 /* (-10000..10000) */

void T_CM_TELEMETRY_Initialize(T_CM_TELEMETRY* pVal);
flag T_CM_TELEMETRY_IsConstraintValid(T_CM_TELEMETRY* val, int* pErrCode);
flag T_CM_TELEMETRY_Encode(T_CM_TELEMETRY* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag T_CM_TELEMETRY_Decode(T_CM_TELEMETRY* val, BitStream* pBitStrm, int* pErrCode);


typedef struct {
    flag  pde1_pde4_config_is_selected;
    flag  pde1_is_available;
    flag  pde2_is_available;
    flag  pde3_is_available;
    flag  pde4_is_available;
    flag  dpu_reset_is_requested;
    T_INTEGER cam_duration;
    flag  cam_boost_only_is_requested;
    flag  halt_mode_is_requested;
} T_CONFIGURATION_TABLE;

#define T_CONFIGURATION_TABLE_REQUIRED_BYTES_FOR_ENCODING		3

#define ERR_T_CONFIGURATION_TABLE_cam_duration		1019 /* (-1000..1000) */

void T_CONFIGURATION_TABLE_Initialize(T_CONFIGURATION_TABLE* pVal);
flag T_CONFIGURATION_TABLE_IsConstraintValid(T_CONFIGURATION_TABLE* val, int* pErrCode);
flag T_CONFIGURATION_TABLE_Encode(T_CONFIGURATION_TABLE* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag T_CONFIGURATION_TABLE_Decode(T_CONFIGURATION_TABLE* val, BitStream* pBitStrm, int* pErrCode);


typedef struct {
    long nCount;
    T_REAL arr[3];
} T_CONTROLLER_SATURATION_LEVEL;

#define T_CONTROLLER_SATURATION_LEVEL_REQUIRED_BYTES_FOR_ENCODING		40

#define ERR_T_CONTROLLER_SATURATION_LEVEL		1020 /* (SIZE (0..3)) */
#define ERR_T_CONTROLLER_SATURATION_LEVEL_elem		1021 /* (-10000..10000) */

void T_CONTROLLER_SATURATION_LEVEL_Initialize(T_CONTROLLER_SATURATION_LEVEL* pVal);
flag T_CONTROLLER_SATURATION_LEVEL_IsConstraintValid(T_CONTROLLER_SATURATION_LEVEL* val, int* pErrCode);
flag T_CONTROLLER_SATURATION_LEVEL_Encode(T_CONTROLLER_SATURATION_LEVEL* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag T_CONTROLLER_SATURATION_LEVEL_Decode(T_CONTROLLER_SATURATION_LEVEL* val, BitStream* pBitStrm, int* pErrCode);


typedef struct {
    T_REAL k1;
    T_REAL k2;
} T_CONTROL_GAINS;

#define T_CONTROL_GAINS_REQUIRED_BYTES_FOR_ENCODING		26

#define ERR_T_CONTROL_GAINS_k1		1022 /* (-10000..10000) */
#define ERR_T_CONTROL_GAINS_k2		1023 /* (-10000..10000) */

void T_CONTROL_GAINS_Initialize(T_CONTROL_GAINS* pVal);
flag T_CONTROL_GAINS_IsConstraintValid(T_CONTROL_GAINS* val, int* pErrCode);
flag T_CONTROL_GAINS_Encode(T_CONTROL_GAINS* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag T_CONTROL_GAINS_Decode(T_CONTROL_GAINS* val, BitStream* pBitStrm, int* pErrCode);


typedef T_REAL T_CURRENT;

#define T_CURRENT_REQUIRED_BYTES_FOR_ENCODING		13

#define ERR_T_CURRENT		1024 /* (-10000..10000) */

void T_CURRENT_Initialize(T_CURRENT* pVal);
flag T_CURRENT_IsConstraintValid(T_CURRENT* val, int* pErrCode);
flag T_CURRENT_Encode(T_CURRENT* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag T_CURRENT_Decode(T_CURRENT* val, BitStream* pBitStrm, int* pErrCode);


typedef struct {
    long nCount;
    T_REAL arr[4];
} T_DTG_ANGULAR_INCREMENT;

#define T_DTG_ANGULAR_INCREMENT_REQUIRED_BYTES_FOR_ENCODING		53

#define ERR_T_DTG_ANGULAR_INCREMENT		1025 /* (SIZE (0..4)) */
#define ERR_T_DTG_ANGULAR_INCREMENT_elem		1026 /* (-10000..10000) */

void T_DTG_ANGULAR_INCREMENT_Initialize(T_DTG_ANGULAR_INCREMENT* pVal);
flag T_DTG_ANGULAR_INCREMENT_IsConstraintValid(T_DTG_ANGULAR_INCREMENT* val, int* pErrCode);
flag T_DTG_ANGULAR_INCREMENT_Encode(T_DTG_ANGULAR_INCREMENT* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag T_DTG_ANGULAR_INCREMENT_Decode(T_DTG_ANGULAR_INCREMENT* val, BitStream* pBitStrm, int* pErrCode);


typedef struct {
    long nCount;
    T_REAL arr[4];
} T_DTG_LSB;

#define T_DTG_LSB_REQUIRED_BYTES_FOR_ENCODING		53

#define ERR_T_DTG_LSB		1027 /* (SIZE (0..4)) */
#define ERR_T_DTG_LSB_elem		1028 /* (-10000..10000) */

void T_DTG_LSB_Initialize(T_DTG_LSB* pVal);
flag T_DTG_LSB_IsConstraintValid(T_DTG_LSB* val, int* pErrCode);
flag T_DTG_LSB_Encode(T_DTG_LSB* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag T_DTG_LSB_Decode(T_DTG_LSB* val, BitStream* pBitStrm, int* pErrCode);


typedef struct {
    long nCount;
    T_REAL arr[30];
} T_DTG_MEAS_TABLE_LINE;

#define T_DTG_MEAS_TABLE_LINE_REQUIRED_BYTES_FOR_ENCODING		391

#define ERR_T_DTG_MEAS_TABLE_LINE		1029 /* (SIZE (0..30)) */
#define ERR_T_DTG_MEAS_TABLE_LINE_elem		1030 /* (-10000..10000) */

void T_DTG_MEAS_TABLE_LINE_Initialize(T_DTG_MEAS_TABLE_LINE* pVal);
flag T_DTG_MEAS_TABLE_LINE_IsConstraintValid(T_DTG_MEAS_TABLE_LINE* val, int* pErrCode);
flag T_DTG_MEAS_TABLE_LINE_Encode(T_DTG_MEAS_TABLE_LINE* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag T_DTG_MEAS_TABLE_LINE_Decode(T_DTG_MEAS_TABLE_LINE* val, BitStream* pBitStrm, int* pErrCode);


typedef struct {
    long nCount;
    T_DTG_MEAS_TABLE_LINE arr[4];
} T_DTG_MEAS_TABLE;

#define T_DTG_MEAS_TABLE_REQUIRED_BYTES_FOR_ENCODING		1563

#define ERR_T_DTG_MEAS_TABLE		1031 /* (SIZE (0..4)) */
#define ERR_T_DTG_MEAS_TABLE_elem		1032 /* (SIZE (0..30)) */

void T_DTG_MEAS_TABLE_Initialize(T_DTG_MEAS_TABLE* pVal);
flag T_DTG_MEAS_TABLE_IsConstraintValid(T_DTG_MEAS_TABLE* val, int* pErrCode);
flag T_DTG_MEAS_TABLE_Encode(T_DTG_MEAS_TABLE* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag T_DTG_MEAS_TABLE_Decode(T_DTG_MEAS_TABLE* val, BitStream* pBitStrm, int* pErrCode);


typedef struct {
    long nCount;
    T_REAL arr[3];
} T_EFFICIENCY_MATRIX_LINE;

#define T_EFFICIENCY_MATRIX_LINE_REQUIRED_BYTES_FOR_ENCODING		40

#define ERR_T_EFFICIENCY_MATRIX_LINE		1033 /* (SIZE (0..3)) */
#define ERR_T_EFFICIENCY_MATRIX_LINE_elem		1034 /* (-10000..10000) */

void T_EFFICIENCY_MATRIX_LINE_Initialize(T_EFFICIENCY_MATRIX_LINE* pVal);
flag T_EFFICIENCY_MATRIX_LINE_IsConstraintValid(T_EFFICIENCY_MATRIX_LINE* val, int* pErrCode);
flag T_EFFICIENCY_MATRIX_LINE_Encode(T_EFFICIENCY_MATRIX_LINE* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag T_EFFICIENCY_MATRIX_LINE_Decode(T_EFFICIENCY_MATRIX_LINE* val, BitStream* pBitStrm, int* pErrCode);


typedef struct {
    long nCount;
    T_EFFICIENCY_MATRIX_LINE arr[3];
} T_EFFICIENCY_MATRIX;

#define T_EFFICIENCY_MATRIX_REQUIRED_BYTES_FOR_ENCODING		118

#define ERR_T_EFFICIENCY_MATRIX		1035 /* (SIZE (0..3)) */
#define ERR_T_EFFICIENCY_MATRIX_elem		1036 /* (SIZE (0..3)) */

void T_EFFICIENCY_MATRIX_Initialize(T_EFFICIENCY_MATRIX* pVal);
flag T_EFFICIENCY_MATRIX_IsConstraintValid(T_EFFICIENCY_MATRIX* val, int* pErrCode);
flag T_EFFICIENCY_MATRIX_Encode(T_EFFICIENCY_MATRIX* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag T_EFFICIENCY_MATRIX_Decode(T_EFFICIENCY_MATRIX* val, BitStream* pBitStrm, int* pErrCode);


typedef struct {
    T_INTEGER fcv1_opening_duration;
    T_INTEGER fcv2_opening_duration;
} T_FCV_OPENING_DUR_CMD;

#define T_FCV_OPENING_DUR_CMD_REQUIRED_BYTES_FOR_ENCODING		3

#define ERR_T_FCV_OPENING_DUR_CMD_fcv1_opening_duration		1037 /* (-1000..1000) */
#define ERR_T_FCV_OPENING_DUR_CMD_fcv2_opening_duration		1038 /* (-1000..1000) */

void T_FCV_OPENING_DUR_CMD_Initialize(T_FCV_OPENING_DUR_CMD* pVal);
flag T_FCV_OPENING_DUR_CMD_IsConstraintValid(T_FCV_OPENING_DUR_CMD* val, int* pErrCode);
flag T_FCV_OPENING_DUR_CMD_Encode(T_FCV_OPENING_DUR_CMD* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag T_FCV_OPENING_DUR_CMD_Decode(T_FCV_OPENING_DUR_CMD* val, BitStream* pBitStrm, int* pErrCode);


typedef struct {
    long nCount;
    T_REAL arr[4];
} T_FORCE_EFFICIENCY_MATRIX_LINE;

#define T_FORCE_EFFICIENCY_MATRIX_LINE_REQUIRED_BYTES_FOR_ENCODING		53

#define ERR_T_FORCE_EFFICIENCY_MATRIX_LINE		1039 /* (SIZE (0..4)) */
#define ERR_T_FORCE_EFFICIENCY_MATRIX_LINE_elem		1040 /* (-10000..10000) */

void T_FORCE_EFFICIENCY_MATRIX_LINE_Initialize(T_FORCE_EFFICIENCY_MATRIX_LINE* pVal);
flag T_FORCE_EFFICIENCY_MATRIX_LINE_IsConstraintValid(T_FORCE_EFFICIENCY_MATRIX_LINE* val, int* pErrCode);
flag T_FORCE_EFFICIENCY_MATRIX_LINE_Encode(T_FORCE_EFFICIENCY_MATRIX_LINE* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag T_FORCE_EFFICIENCY_MATRIX_LINE_Decode(T_FORCE_EFFICIENCY_MATRIX_LINE* val, BitStream* pBitStrm, int* pErrCode);


typedef struct {
    long nCount;
    T_FORCE_EFFICIENCY_MATRIX_LINE arr[3];
} T_FORCE_EFFICIENCY_MATRIX;

#define T_FORCE_EFFICIENCY_MATRIX_REQUIRED_BYTES_FOR_ENCODING		158

#define ERR_T_FORCE_EFFICIENCY_MATRIX		1041 /* (SIZE (0..3)) */
#define ERR_T_FORCE_EFFICIENCY_MATRIX_elem		1042 /* (SIZE (0..4)) */

void T_FORCE_EFFICIENCY_MATRIX_Initialize(T_FORCE_EFFICIENCY_MATRIX* pVal);
flag T_FORCE_EFFICIENCY_MATRIX_IsConstraintValid(T_FORCE_EFFICIENCY_MATRIX* val, int* pErrCode);
flag T_FORCE_EFFICIENCY_MATRIX_Encode(T_FORCE_EFFICIENCY_MATRIX* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag T_FORCE_EFFICIENCY_MATRIX_Decode(T_FORCE_EFFICIENCY_MATRIX* val, BitStream* pBitStrm, int* pErrCode);


typedef struct {
    flag  ftc1_health_status_is_on;
    flag  ftc2_health_status_is_on;
    flag  ftc3_health_status_is_on;
} T_FTCP_HEALTH_STATUS;

#define T_FTCP_HEALTH_STATUS_REQUIRED_BYTES_FOR_ENCODING		1


void T_FTCP_HEALTH_STATUS_Initialize(T_FTCP_HEALTH_STATUS* pVal);
flag T_FTCP_HEALTH_STATUS_IsConstraintValid(T_FTCP_HEALTH_STATUS* val, int* pErrCode);
flag T_FTCP_HEALTH_STATUS_Encode(T_FTCP_HEALTH_STATUS* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag T_FTCP_HEALTH_STATUS_Decode(T_FTCP_HEALTH_STATUS* val, BitStream* pBitStrm, int* pErrCode);


typedef struct {
    long nCount;
    T_REAL arr[3];
} T_INERTIA;

#define T_INERTIA_REQUIRED_BYTES_FOR_ENCODING		40

#define ERR_T_INERTIA		1043 /* (SIZE (0..3)) */
#define ERR_T_INERTIA_elem		1044 /* (-10000..10000) */

void T_INERTIA_Initialize(T_INERTIA* pVal);
flag T_INERTIA_IsConstraintValid(T_INERTIA* val, int* pErrCode);
flag T_INERTIA_Encode(T_INERTIA* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag T_INERTIA_Decode(T_INERTIA* val, BitStream* pBitStrm, int* pErrCode);


typedef struct {
    long nCount;
    T_REAL arr[4];
} T_INITIAL_EFFICIENCY_MATRIX_LINE;

#define T_INITIAL_EFFICIENCY_MATRIX_LINE_REQUIRED_BYTES_FOR_ENCODING		53

#define ERR_T_INITIAL_EFFICIENCY_MATRIX_LINE		1045 /* (SIZE (0..4)) */
#define ERR_T_INITIAL_EFFICIENCY_MATRIX_LINE_elem		1046 /* (-10000..10000) */

void T_INITIAL_EFFICIENCY_MATRIX_LINE_Initialize(T_INITIAL_EFFICIENCY_MATRIX_LINE* pVal);
flag T_INITIAL_EFFICIENCY_MATRIX_LINE_IsConstraintValid(T_INITIAL_EFFICIENCY_MATRIX_LINE* val, int* pErrCode);
flag T_INITIAL_EFFICIENCY_MATRIX_LINE_Encode(T_INITIAL_EFFICIENCY_MATRIX_LINE* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag T_INITIAL_EFFICIENCY_MATRIX_LINE_Decode(T_INITIAL_EFFICIENCY_MATRIX_LINE* val, BitStream* pBitStrm, int* pErrCode);


typedef struct {
    long nCount;
    T_INITIAL_EFFICIENCY_MATRIX_LINE arr[6];
} T_INITIAL_EFFICIENCY_MATRIX;

#define T_INITIAL_EFFICIENCY_MATRIX_REQUIRED_BYTES_FOR_ENCODING		315

#define ERR_T_INITIAL_EFFICIENCY_MATRIX		1047 /* (SIZE (0..6)) */
#define ERR_T_INITIAL_EFFICIENCY_MATRIX_elem		1048 /* (SIZE (0..4)) */

void T_INITIAL_EFFICIENCY_MATRIX_Initialize(T_INITIAL_EFFICIENCY_MATRIX* pVal);
flag T_INITIAL_EFFICIENCY_MATRIX_IsConstraintValid(T_INITIAL_EFFICIENCY_MATRIX* val, int* pErrCode);
flag T_INITIAL_EFFICIENCY_MATRIX_Encode(T_INITIAL_EFFICIENCY_MATRIX* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag T_INITIAL_EFFICIENCY_MATRIX_Decode(T_INITIAL_EFFICIENCY_MATRIX* val, BitStream* pBitStrm, int* pErrCode);


typedef T_REAL T_MASS;

#define T_MASS_REQUIRED_BYTES_FOR_ENCODING		13

#define ERR_T_MASS		1049 /* (-10000..10000) */

void T_MASS_Initialize(T_MASS* pVal);
flag T_MASS_IsConstraintValid(T_MASS* val, int* pErrCode);
flag T_MASS_Encode(T_MASS* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag T_MASS_Decode(T_MASS* val, BitStream* pBitStrm, int* pErrCode);


typedef struct {
    long nCount;
    T_REAL arr[4];
} T_MATRIX_3_4_LINE;

#define T_MATRIX_3_4_LINE_REQUIRED_BYTES_FOR_ENCODING		53

#define ERR_T_MATRIX_3_4_LINE		1050 /* (SIZE (0..4)) */
#define ERR_T_MATRIX_3_4_LINE_elem		1051 /* (-10000..10000) */

void T_MATRIX_3_4_LINE_Initialize(T_MATRIX_3_4_LINE* pVal);
flag T_MATRIX_3_4_LINE_IsConstraintValid(T_MATRIX_3_4_LINE* val, int* pErrCode);
flag T_MATRIX_3_4_LINE_Encode(T_MATRIX_3_4_LINE* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag T_MATRIX_3_4_LINE_Decode(T_MATRIX_3_4_LINE* val, BitStream* pBitStrm, int* pErrCode);


typedef struct {
    long nCount;
    T_MATRIX_3_4_LINE arr[3];
} T_MATRIX_3_4;

#define T_MATRIX_3_4_REQUIRED_BYTES_FOR_ENCODING		158

#define ERR_T_MATRIX_3_4		1052 /* (SIZE (0..3)) */
#define ERR_T_MATRIX_3_4_elem		1053 /* (SIZE (0..4)) */

void T_MATRIX_3_4_Initialize(T_MATRIX_3_4* pVal);
flag T_MATRIX_3_4_IsConstraintValid(T_MATRIX_3_4* val, int* pErrCode);
flag T_MATRIX_3_4_Encode(T_MATRIX_3_4* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag T_MATRIX_3_4_Decode(T_MATRIX_3_4* val, BitStream* pBitStrm, int* pErrCode);


typedef enum {
    msu1 = 0,
    msu2 = 1
} T_MSU_ID;

#define T_MSU_ID_REQUIRED_BYTES_FOR_ENCODING		1


void T_MSU_ID_Initialize(T_MSU_ID* pVal);
flag T_MSU_ID_IsConstraintValid(T_MSU_ID* val, int* pErrCode);
flag T_MSU_ID_Encode(T_MSU_ID* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag T_MSU_ID_Decode(T_MSU_ID* val, BitStream* pBitStrm, int* pErrCode);


typedef enum {
    slave = 0,
    master = 1
} T_MSU_STATUS;

#define T_MSU_STATUS_REQUIRED_BYTES_FOR_ENCODING		1


void T_MSU_STATUS_Initialize(T_MSU_STATUS* pVal);
flag T_MSU_STATUS_IsConstraintValid(T_MSU_STATUS* val, int* pErrCode);
flag T_MSU_STATUS_Encode(T_MSU_STATUS* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag T_MSU_STATUS_Decode(T_MSU_STATUS* val, BitStream* pBitStrm, int* pErrCode);


typedef T_INTEGER T_OBUT;

#define T_OBUT_REQUIRED_BYTES_FOR_ENCODING		2

#define ERR_T_OBUT		1054 /* (-1000..1000) */

void T_OBUT_Initialize(T_OBUT* pVal);
flag T_OBUT_IsConstraintValid(T_OBUT* val, int* pErrCode);
flag T_OBUT_Encode(T_OBUT* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag T_OBUT_Decode(T_OBUT* val, BitStream* pBitStrm, int* pErrCode);


typedef struct {
    flag  on_cmd;
    flag  off_cmd;
} T_ON_OFF_CMD;

#define T_ON_OFF_CMD_REQUIRED_BYTES_FOR_ENCODING		1


void T_ON_OFF_CMD_Initialize(T_ON_OFF_CMD* pVal);
flag T_ON_OFF_CMD_IsConstraintValid(T_ON_OFF_CMD* val, int* pErrCode);
flag T_ON_OFF_CMD_Encode(T_ON_OFF_CMD* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag T_ON_OFF_CMD_Decode(T_ON_OFF_CMD* val, BitStream* pBitStrm, int* pErrCode);


typedef struct {
    flag  data_is_available;
    T_INTEGER x_velocity;
    T_INTEGER y_velocity;
} T_PFS_ACM_DATA;

#define T_PFS_ACM_DATA_REQUIRED_BYTES_FOR_ENCODING		3

#define ERR_T_PFS_ACM_DATA_x_velocity		1055 /* (-1000..1000) */
#define ERR_T_PFS_ACM_DATA_y_velocity		1056 /* (-1000..1000) */

void T_PFS_ACM_DATA_Initialize(T_PFS_ACM_DATA* pVal);
flag T_PFS_ACM_DATA_IsConstraintValid(T_PFS_ACM_DATA* val, int* pErrCode);
flag T_PFS_ACM_DATA_Encode(T_PFS_ACM_DATA* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag T_PFS_ACM_DATA_Decode(T_PFS_ACM_DATA* val, BitStream* pBitStrm, int* pErrCode);


typedef struct {
    T_ACS_CMD pfs_ewc_msu_pde1_t;
    T_ACS_CMD pfs_ewc_msu_pde2_t;
    T_ACS_CMD pfs_ewc_msu_pde3_t;
    T_ACS_CMD pfs_ewc_msu_pde4_t;
} T_PFS_EWC_MSU_PDE_T;

#define T_PFS_EWC_MSU_PDE_T_REQUIRED_BYTES_FOR_ENCODING		1


void T_PFS_EWC_MSU_PDE_T_Initialize(T_PFS_EWC_MSU_PDE_T* pVal);
flag T_PFS_EWC_MSU_PDE_T_IsConstraintValid(T_PFS_EWC_MSU_PDE_T* val, int* pErrCode);
flag T_PFS_EWC_MSU_PDE_T_Encode(T_PFS_EWC_MSU_PDE_T* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag T_PFS_EWC_MSU_PDE_T_Decode(T_PFS_EWC_MSU_PDE_T* val, BitStream* pBitStrm, int* pErrCode);


typedef enum {
    dtg_fine_mode = 0,
    dtg_coarse_mode = 1
} T_PFS_EWM_DTG_MSU_MODE;

#define T_PFS_EWM_DTG_MSU_MODE_REQUIRED_BYTES_FOR_ENCODING		1


void T_PFS_EWM_DTG_MSU_MODE_Initialize(T_PFS_EWM_DTG_MSU_MODE* pVal);
flag T_PFS_EWM_DTG_MSU_MODE_IsConstraintValid(T_PFS_EWM_DTG_MSU_MODE* val, int* pErrCode);
flag T_PFS_EWM_DTG_MSU_MODE_Encode(T_PFS_EWM_DTG_MSU_MODE* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag T_PFS_EWM_DTG_MSU_MODE_Decode(T_PFS_EWM_DTG_MSU_MODE* val, BitStream* pBitStrm, int* pErrCode);


typedef struct {
    flag  pfs_ewm_msu_hs_is_ok1;
    flag  pfs_ewm_msu_hs_is_ok2;
    flag  pfs_ewm_msu_hs_is_ok3;
} T_PFS_EWM_MSU_MSU_HS;

#define T_PFS_EWM_MSU_MSU_HS_REQUIRED_BYTES_FOR_ENCODING		1


void T_PFS_EWM_MSU_MSU_HS_Initialize(T_PFS_EWM_MSU_MSU_HS* pVal);
flag T_PFS_EWM_MSU_MSU_HS_IsConstraintValid(T_PFS_EWM_MSU_MSU_HS* val, int* pErrCode);
flag T_PFS_EWM_MSU_MSU_HS_Encode(T_PFS_EWM_MSU_MSU_HS* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag T_PFS_EWM_MSU_MSU_HS_Decode(T_PFS_EWM_MSU_MSU_HS* val, BitStream* pBitStrm, int* pErrCode);


typedef struct {
    T_REAL pfs_ewm_ssu_msu_meas1;
    T_REAL pfs_ewm_ssu_msu_meas2;
    T_REAL pfs_ewm_ssu_msu_meas3;
    T_REAL pfs_ewm_ssu_msu_meas4;
} T_PFS_EWM_SSU_MSU_MEAS;

#define T_PFS_EWM_SSU_MSU_MEAS_REQUIRED_BYTES_FOR_ENCODING		52

#define ERR_T_PFS_EWM_SSU_MSU_MEAS_pfs_ewm_ssu_msu_meas1		1057 /* (-10000..10000) */
#define ERR_T_PFS_EWM_SSU_MSU_MEAS_pfs_ewm_ssu_msu_meas2		1058 /* (-10000..10000) */
#define ERR_T_PFS_EWM_SSU_MSU_MEAS_pfs_ewm_ssu_msu_meas3		1059 /* (-10000..10000) */
#define ERR_T_PFS_EWM_SSU_MSU_MEAS_pfs_ewm_ssu_msu_meas4		1060 /* (-10000..10000) */

void T_PFS_EWM_SSU_MSU_MEAS_Initialize(T_PFS_EWM_SSU_MSU_MEAS* pVal);
flag T_PFS_EWM_SSU_MSU_MEAS_IsConstraintValid(T_PFS_EWM_SSU_MSU_MEAS* val, int* pErrCode);
flag T_PFS_EWM_SSU_MSU_MEAS_Encode(T_PFS_EWM_SSU_MSU_MEAS* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag T_PFS_EWM_SSU_MSU_MEAS_Decode(T_PFS_EWM_SSU_MSU_MEAS* val, BitStream* pBitStrm, int* pErrCode);


typedef struct {
    flag  data_is_available;
    T_INTEGER current_mode;
    flag  target_data_valid;
    flag  on_line_bit_result;
    T_INTEGER frame_counter;
    flag  retro1_data_valid;
    flag  retro2_data_valid;
    T_INTEGER target_range;
    T_INTEGER target_datation;
    T_INTEGER retro1_range;
    T_INTEGER retro1_datation;
    T_INTEGER retro2_range;
    T_INTEGER retro2_datation;
} T_PFS_TGM_DATA;

#define T_PFS_TGM_DATA_REQUIRED_BYTES_FOR_ENCODING		12

#define ERR_T_PFS_TGM_DATA_current_mode		1061 /* (-1000..1000) */
#define ERR_T_PFS_TGM_DATA_frame_counter		1062 /* (-1000..1000) */
#define ERR_T_PFS_TGM_DATA_target_range		1063 /* (-1000..1000) */
#define ERR_T_PFS_TGM_DATA_target_datation		1064 /* (-1000..1000) */
#define ERR_T_PFS_TGM_DATA_retro1_range		1065 /* (-1000..1000) */
#define ERR_T_PFS_TGM_DATA_retro1_datation		1066 /* (-1000..1000) */
#define ERR_T_PFS_TGM_DATA_retro2_range		1067 /* (-1000..1000) */
#define ERR_T_PFS_TGM_DATA_retro2_datation		1068 /* (-1000..1000) */

void T_PFS_TGM_DATA_Initialize(T_PFS_TGM_DATA* pVal);
flag T_PFS_TGM_DATA_IsConstraintValid(T_PFS_TGM_DATA* val, int* pErrCode);
flag T_PFS_TGM_DATA_Encode(T_PFS_TGM_DATA* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag T_PFS_TGM_DATA_Decode(T_PFS_TGM_DATA* val, BitStream* pBitStrm, int* pErrCode);


typedef T_REAL T_POWER_CONSUMPTION;

#define T_POWER_CONSUMPTION_REQUIRED_BYTES_FOR_ENCODING		13

#define ERR_T_POWER_CONSUMPTION		1069 /* (-10000..10000) */

void T_POWER_CONSUMPTION_Initialize(T_POWER_CONSUMPTION* pVal);
flag T_POWER_CONSUMPTION_IsConstraintValid(T_POWER_CONSUMPTION* val, int* pErrCode);
flag T_POWER_CONSUMPTION_Encode(T_POWER_CONSUMPTION* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag T_POWER_CONSUMPTION_Decode(T_POWER_CONSUMPTION* val, BitStream* pBitStrm, int* pErrCode);


typedef struct {
    long nCount;
    T_REAL arr[4];
} T_QUATERNION;

#define T_QUATERNION_REQUIRED_BYTES_FOR_ENCODING		53

#define ERR_T_QUATERNION		1070 /* (SIZE (0..4)) */
#define ERR_T_QUATERNION_elem		1071 /* (-10000..10000) */

void T_QUATERNION_Initialize(T_QUATERNION* pVal);
flag T_QUATERNION_IsConstraintValid(T_QUATERNION* val, int* pErrCode);
flag T_QUATERNION_Encode(T_QUATERNION* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag T_QUATERNION_Decode(T_QUATERNION* val, BitStream* pBitStrm, int* pErrCode);


typedef struct {
    flag  pde1_pde4_config_is_selected;
    flag  pde1_is_available;
    flag  pde2_is_available;
    flag  pde3_is_available;
    flag  pde4_is_available;
    flag  dpu_reset_is_requested;
    T_INTEGER cam_duration;
    flag  cam_boost_only_is_requested;
    flag  halt_mode_is_requested;
} T_SEQUENCER_CONFIGURATION;

#define T_SEQUENCER_CONFIGURATION_REQUIRED_BYTES_FOR_ENCODING		3

#define ERR_T_SEQUENCER_CONFIGURATION_cam_duration		1072 /* (-1000..1000) */

void T_SEQUENCER_CONFIGURATION_Initialize(T_SEQUENCER_CONFIGURATION* pVal);
flag T_SEQUENCER_CONFIGURATION_IsConstraintValid(T_SEQUENCER_CONFIGURATION* val, int* pErrCode);
flag T_SEQUENCER_CONFIGURATION_Encode(T_SEQUENCER_CONFIGURATION* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag T_SEQUENCER_CONFIGURATION_Decode(T_SEQUENCER_CONFIGURATION* val, BitStream* pBitStrm, int* pErrCode);


typedef T_INTEGER T_SW_WARNING_CODE;

#define T_SW_WARNING_CODE_REQUIRED_BYTES_FOR_ENCODING		2

#define ERR_T_SW_WARNING_CODE		1073 /* (-1000..1000) */

void T_SW_WARNING_CODE_Initialize(T_SW_WARNING_CODE* pVal);
flag T_SW_WARNING_CODE_IsConstraintValid(T_SW_WARNING_CODE* val, int* pErrCode);
flag T_SW_WARNING_CODE_Encode(T_SW_WARNING_CODE* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag T_SW_WARNING_CODE_Decode(T_SW_WARNING_CODE* val, BitStream* pBitStrm, int* pErrCode);


typedef struct {
    long nCount;
    flag  arr[4];
} T_SYNCHRO_BROADCAST_STATUS;

#define T_SYNCHRO_BROADCAST_STATUS_REQUIRED_BYTES_FOR_ENCODING		1

#define ERR_T_SYNCHRO_BROADCAST_STATUS		1074 /* (SIZE (0..4)) */

void T_SYNCHRO_BROADCAST_STATUS_Initialize(T_SYNCHRO_BROADCAST_STATUS* pVal);
flag T_SYNCHRO_BROADCAST_STATUS_IsConstraintValid(T_SYNCHRO_BROADCAST_STATUS* val, int* pErrCode);
flag T_SYNCHRO_BROADCAST_STATUS_Encode(T_SYNCHRO_BROADCAST_STATUS* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag T_SYNCHRO_BROADCAST_STATUS_Decode(T_SYNCHRO_BROADCAST_STATUS* val, BitStream* pBitStrm, int* pErrCode);


typedef T_REAL T_TEMP;

#define T_TEMP_REQUIRED_BYTES_FOR_ENCODING		13

#define ERR_T_TEMP		1075 /* (-10000..10000) */

void T_TEMP_Initialize(T_TEMP* pVal);
flag T_TEMP_IsConstraintValid(T_TEMP* val, int* pErrCode);
flag T_TEMP_Encode(T_TEMP* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag T_TEMP_Decode(T_TEMP* val, BitStream* pBitStrm, int* pErrCode);


typedef struct {
    T_FCV_OPENING_DUR_CMD thrusters_opening_pde1;
    T_FCV_OPENING_DUR_CMD thrusters_opening_pde2;
} T_THRUSTERS_OPENING;

#define T_THRUSTERS_OPENING_REQUIRED_BYTES_FOR_ENCODING		6


void T_THRUSTERS_OPENING_Initialize(T_THRUSTERS_OPENING* pVal);
flag T_THRUSTERS_OPENING_IsConstraintValid(T_THRUSTERS_OPENING* val, int* pErrCode);
flag T_THRUSTERS_OPENING_Encode(T_THRUSTERS_OPENING* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag T_THRUSTERS_OPENING_Decode(T_THRUSTERS_OPENING* val, BitStream* pBitStrm, int* pErrCode);


typedef struct {
    long nCount;
    T_REAL arr[3];
} T_TORQUE_EFFICIENCY_MATRIX_LINE;

#define T_TORQUE_EFFICIENCY_MATRIX_LINE_REQUIRED_BYTES_FOR_ENCODING		40

#define ERR_T_TORQUE_EFFICIENCY_MATRIX_LINE		1076 /* (SIZE (0..3)) */
#define ERR_T_TORQUE_EFFICIENCY_MATRIX_LINE_elem		1077 /* (-10000..10000) */

void T_TORQUE_EFFICIENCY_MATRIX_LINE_Initialize(T_TORQUE_EFFICIENCY_MATRIX_LINE* pVal);
flag T_TORQUE_EFFICIENCY_MATRIX_LINE_IsConstraintValid(T_TORQUE_EFFICIENCY_MATRIX_LINE* val, int* pErrCode);
flag T_TORQUE_EFFICIENCY_MATRIX_LINE_Encode(T_TORQUE_EFFICIENCY_MATRIX_LINE* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag T_TORQUE_EFFICIENCY_MATRIX_LINE_Decode(T_TORQUE_EFFICIENCY_MATRIX_LINE* val, BitStream* pBitStrm, int* pErrCode);


typedef struct {
    long nCount;
    T_TORQUE_EFFICIENCY_MATRIX_LINE arr[3];
} T_TORQUE_EFFICIENCY_MATRIX;

#define T_TORQUE_EFFICIENCY_MATRIX_REQUIRED_BYTES_FOR_ENCODING		118

#define ERR_T_TORQUE_EFFICIENCY_MATRIX		1078 /* (SIZE (0..3)) */
#define ERR_T_TORQUE_EFFICIENCY_MATRIX_elem		1079 /* (SIZE (0..3)) */

void T_TORQUE_EFFICIENCY_MATRIX_Initialize(T_TORQUE_EFFICIENCY_MATRIX* pVal);
flag T_TORQUE_EFFICIENCY_MATRIX_IsConstraintValid(T_TORQUE_EFFICIENCY_MATRIX* val, int* pErrCode);
flag T_TORQUE_EFFICIENCY_MATRIX_Encode(T_TORQUE_EFFICIENCY_MATRIX* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag T_TORQUE_EFFICIENCY_MATRIX_Decode(T_TORQUE_EFFICIENCY_MATRIX* val, BitStream* pBitStrm, int* pErrCode);


typedef struct {
    long nCount;
    T_REAL arr[12];
} T_VECTOR12;

#define T_VECTOR12_REQUIRED_BYTES_FOR_ENCODING		157

#define ERR_T_VECTOR12		1080 /* (SIZE (0..12)) */
#define ERR_T_VECTOR12_elem		1081 /* (-10000..10000) */

void T_VECTOR12_Initialize(T_VECTOR12* pVal);
flag T_VECTOR12_IsConstraintValid(T_VECTOR12* val, int* pErrCode);
flag T_VECTOR12_Encode(T_VECTOR12* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag T_VECTOR12_Decode(T_VECTOR12* val, BitStream* pBitStrm, int* pErrCode);


typedef struct {
    long nCount;
    T_REAL arr[18];
} T_VECTOR18;

#define T_VECTOR18_REQUIRED_BYTES_FOR_ENCODING		235

#define ERR_T_VECTOR18		1082 /* (SIZE (0..18)) */
#define ERR_T_VECTOR18_elem		1083 /* (-10000..10000) */

void T_VECTOR18_Initialize(T_VECTOR18* pVal);
flag T_VECTOR18_IsConstraintValid(T_VECTOR18* val, int* pErrCode);
flag T_VECTOR18_Encode(T_VECTOR18* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag T_VECTOR18_Decode(T_VECTOR18* val, BitStream* pBitStrm, int* pErrCode);


typedef struct {
    long nCount;
    T_REAL arr[3];
} T_VECTOR3;

#define T_VECTOR3_REQUIRED_BYTES_FOR_ENCODING		40

#define ERR_T_VECTOR3		1084 /* (SIZE (0..3)) */
#define ERR_T_VECTOR3_elem		1085 /* (-10000..10000) */

void T_VECTOR3_Initialize(T_VECTOR3* pVal);
flag T_VECTOR3_IsConstraintValid(T_VECTOR3* val, int* pErrCode);
flag T_VECTOR3_Encode(T_VECTOR3* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag T_VECTOR3_Decode(T_VECTOR3* val, BitStream* pBitStrm, int* pErrCode);


typedef struct {
    long nCount;
    T_REAL arr[4];
} T_VECTOR4;

#define T_VECTOR4_REQUIRED_BYTES_FOR_ENCODING		53

#define ERR_T_VECTOR4		1086 /* (SIZE (0..4)) */
#define ERR_T_VECTOR4_elem		1087 /* (-10000..10000) */

void T_VECTOR4_Initialize(T_VECTOR4* pVal);
flag T_VECTOR4_IsConstraintValid(T_VECTOR4* val, int* pErrCode);
flag T_VECTOR4_Encode(T_VECTOR4* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag T_VECTOR4_Decode(T_VECTOR4* val, BitStream* pBitStrm, int* pErrCode);


typedef struct {
    long nCount;
    T_REAL arr[6];
} T_VECTOR6;

#define T_VECTOR6_REQUIRED_BYTES_FOR_ENCODING		79

#define ERR_T_VECTOR6		1088 /* (SIZE (0..6)) */
#define ERR_T_VECTOR6_elem		1089 /* (-10000..10000) */

void T_VECTOR6_Initialize(T_VECTOR6* pVal);
flag T_VECTOR6_IsConstraintValid(T_VECTOR6* val, int* pErrCode);
flag T_VECTOR6_Encode(T_VECTOR6* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag T_VECTOR6_Decode(T_VECTOR6* val, BitStream* pBitStrm, int* pErrCode);


typedef struct {
    long nCount;
    T_REAL arr[8];
} T_VECTOR8;

#define T_VECTOR8_REQUIRED_BYTES_FOR_ENCODING		105

#define ERR_T_VECTOR8		1090 /* (SIZE (0..8)) */
#define ERR_T_VECTOR8_elem		1091 /* (-10000..10000) */

void T_VECTOR8_Initialize(T_VECTOR8* pVal);
flag T_VECTOR8_IsConstraintValid(T_VECTOR8* val, int* pErrCode);
flag T_VECTOR8_Encode(T_VECTOR8* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag T_VECTOR8_Decode(T_VECTOR8* val, BitStream* pBitStrm, int* pErrCode);


typedef struct {
    long nCount;
    T_REAL arr[9];
} T_VECTOR9;

#define T_VECTOR9_REQUIRED_BYTES_FOR_ENCODING		118

#define ERR_T_VECTOR9		1092 /* (SIZE (0..9)) */
#define ERR_T_VECTOR9_elem		1093 /* (-10000..10000) */

void T_VECTOR9_Initialize(T_VECTOR9* pVal);
flag T_VECTOR9_IsConstraintValid(T_VECTOR9* val, int* pErrCode);
flag T_VECTOR9_Encode(T_VECTOR9* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag T_VECTOR9_Decode(T_VECTOR9* val, BitStream* pBitStrm, int* pErrCode);


typedef T_REAL T_VELOCITY;

#define T_VELOCITY_REQUIRED_BYTES_FOR_ENCODING		13

#define ERR_T_VELOCITY		1094 /* (-10000..10000) */

void T_VELOCITY_Initialize(T_VELOCITY* pVal);
flag T_VELOCITY_IsConstraintValid(T_VELOCITY* val, int* pErrCode);
flag T_VELOCITY_Encode(T_VELOCITY* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag T_VELOCITY_Decode(T_VELOCITY* val, BitStream* pBitStrm, int* pErrCode);


typedef T_REAL T_VOLTAGE;

#define T_VOLTAGE_REQUIRED_BYTES_FOR_ENCODING		13

#define ERR_T_VOLTAGE		1095 /* (-10000..10000) */

void T_VOLTAGE_Initialize(T_VOLTAGE* pVal);
flag T_VOLTAGE_IsConstraintValid(T_VOLTAGE* val, int* pErrCode);
flag T_VOLTAGE_Encode(T_VOLTAGE* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag T_VOLTAGE_Decode(T_VOLTAGE* val, BitStream* pBitStrm, int* pErrCode);


typedef T_INTEGER INTEGER16;

#define INTEGER16_REQUIRED_BYTES_FOR_ENCODING		2

#define ERR_INTEGER16		1096 /* (-1000..1000) */

void INTEGER16_Initialize(INTEGER16* pVal);
flag INTEGER16_IsConstraintValid(INTEGER16* val, int* pErrCode);
flag INTEGER16_Encode(INTEGER16* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag INTEGER16_Decode(INTEGER16* val, BitStream* pBitStrm, int* pErrCode);


typedef struct {
    flag  is_in_cam;
    flag  is_in_sa;
    flag  is_in_sp;
} T_CAM_MODE;

#define T_CAM_MODE_REQUIRED_BYTES_FOR_ENCODING		1


void T_CAM_MODE_Initialize(T_CAM_MODE* pVal);
flag T_CAM_MODE_IsConstraintValid(T_CAM_MODE* val, int* pErrCode);
flag T_CAM_MODE_Encode(T_CAM_MODE* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag T_CAM_MODE_Decode(T_CAM_MODE* val, BitStream* pBitStrm, int* pErrCode);


typedef struct {
    T_CONFIGURATION_TABLE configuration_table;
    flag  new_config_is_available;
} T_PFS_EC_UPDATE_CONF_MSU;

#define T_PFS_EC_UPDATE_CONF_MSU_REQUIRED_BYTES_FOR_ENCODING		3


void T_PFS_EC_UPDATE_CONF_MSU_Initialize(T_PFS_EC_UPDATE_CONF_MSU* pVal);
flag T_PFS_EC_UPDATE_CONF_MSU_IsConstraintValid(T_PFS_EC_UPDATE_CONF_MSU* val, int* pErrCode);
flag T_PFS_EC_UPDATE_CONF_MSU_Encode(T_PFS_EC_UPDATE_CONF_MSU* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag T_PFS_EC_UPDATE_CONF_MSU_Decode(T_PFS_EC_UPDATE_CONF_MSU* val, BitStream* pBitStrm, int* pErrCode);


typedef struct {
    flag  state_is_pfs_m_standby;
    flag  state_is_pfs_m_ready_for_cam;
    flag  state_is_pfs_m_cam_prgs;
    flag  state_is_pfs_m_cam_inhib;
} T_MSU_STATE;

#define T_MSU_STATE_REQUIRED_BYTES_FOR_ENCODING		1


void T_MSU_STATE_Initialize(T_MSU_STATE* pVal);
flag T_MSU_STATE_IsConstraintValid(T_MSU_STATE* val, int* pErrCode);
flag T_MSU_STATE_Encode(T_MSU_STATE* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag T_MSU_STATE_Decode(T_MSU_STATE* val, BitStream* pBitStrm, int* pErrCode);


typedef struct {
    T_ON_OFF_CMD set_pfs_ewc_msu_dpu_reset;
    T_ON_OFF_CMD set_pfs_ewc_msu_dpu_cam;
} T_DPU_CMD;

#define T_DPU_CMD_REQUIRED_BYTES_FOR_ENCODING		1


void T_DPU_CMD_Initialize(T_DPU_CMD* pVal);
flag T_DPU_CMD_IsConstraintValid(T_DPU_CMD* val, int* pErrCode);
flag T_DPU_CMD_Encode(T_DPU_CMD* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag T_DPU_CMD_Decode(T_DPU_CMD* val, BitStream* pBitStrm, int* pErrCode);


typedef struct {
    flag  set_pfs_hltm_cam_test2_status;
    flag  set_pfs_hltm_cam_trig_status;
    flag  set_pfs_hltm_msu_master_status;
    flag  set_pfs_hltm_config_status;
    flag  set_pfs_hltm_msu_health_status;
    flag  set_pfs_hltm_ftcp_res_detected;
    T_MSU_STATE msu_state;
} T_HLTM;

#define T_HLTM_REQUIRED_BYTES_FOR_ENCODING		2


void T_HLTM_Initialize(T_HLTM* pVal);
flag T_HLTM_IsConstraintValid(T_HLTM* val, int* pErrCode);
flag T_HLTM_Encode(T_HLTM* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag T_HLTM_Decode(T_HLTM* val, BitStream* pBitStrm, int* pErrCode);


typedef struct {
    flag  pfs_hltc_update_config_is_on;
    T_PFS_EC_UPDATE_CONF_MSU pfs_ec_update_config;
    flag  pfs_hltc_enable_cam_test2_is_on;
    flag  pfs_hltc_disable_cam_test2_on;
} T_HLTC;

#define T_HLTC_REQUIRED_BYTES_FOR_ENCODING		3


void T_HLTC_Initialize(T_HLTC* pVal);
flag T_HLTC_IsConstraintValid(T_HLTC* val, int* pErrCode);
flag T_HLTC_Encode(T_HLTC* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag T_HLTC_Decode(T_HLTC* val, BitStream* pBitStrm, int* pErrCode);


typedef MYBOOL T_PFS_IWM_ARMING_RELAY_STATUS_ON;

#define T_PFS_IWM_ARMING_RELAY_STATUS_ON_REQUIRED_BYTES_FOR_ENCODING		1


void T_PFS_IWM_ARMING_RELAY_STATUS_ON_Initialize(T_PFS_IWM_ARMING_RELAY_STATUS_ON* pVal);
flag T_PFS_IWM_ARMING_RELAY_STATUS_ON_IsConstraintValid(T_PFS_IWM_ARMING_RELAY_STATUS_ON* val, int* pErrCode);
flag T_PFS_IWM_ARMING_RELAY_STATUS_ON_Encode(T_PFS_IWM_ARMING_RELAY_STATUS_ON* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag T_PFS_IWM_ARMING_RELAY_STATUS_ON_Decode(T_PFS_IWM_ARMING_RELAY_STATUS_ON* val, BitStream* pBitStrm, int* pErrCode);


typedef MYBOOL T_PFS_HLTC_RED_BUTTON_IS_ON;

#define T_PFS_HLTC_RED_BUTTON_IS_ON_REQUIRED_BYTES_FOR_ENCODING		1


void T_PFS_HLTC_RED_BUTTON_IS_ON_Initialize(T_PFS_HLTC_RED_BUTTON_IS_ON* pVal);
flag T_PFS_HLTC_RED_BUTTON_IS_ON_IsConstraintValid(T_PFS_HLTC_RED_BUTTON_IS_ON* val, int* pErrCode);
flag T_PFS_HLTC_RED_BUTTON_IS_ON_Encode(T_PFS_HLTC_RED_BUTTON_IS_ON* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag T_PFS_HLTC_RED_BUTTON_IS_ON_Decode(T_PFS_HLTC_RED_BUTTON_IS_ON* val, BitStream* pBitStrm, int* pErrCode);


typedef MYBOOL T_END_BOOST_IS_REACHED;

#define T_END_BOOST_IS_REACHED_REQUIRED_BYTES_FOR_ENCODING		1


void T_END_BOOST_IS_REACHED_Initialize(T_END_BOOST_IS_REACHED* pVal);
flag T_END_BOOST_IS_REACHED_IsConstraintValid(T_END_BOOST_IS_REACHED* val, int* pErrCode);
flag T_END_BOOST_IS_REACHED_Encode(T_END_BOOST_IS_REACHED* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag T_END_BOOST_IS_REACHED_Decode(T_END_BOOST_IS_REACHED* val, BitStream* pBitStrm, int* pErrCode);


typedef MYBOOL T_SUN_IS_AIMED;

#define T_SUN_IS_AIMED_REQUIRED_BYTES_FOR_ENCODING		1


void T_SUN_IS_AIMED_Initialize(T_SUN_IS_AIMED* pVal);
flag T_SUN_IS_AIMED_IsConstraintValid(T_SUN_IS_AIMED* val, int* pErrCode);
flag T_SUN_IS_AIMED_Encode(T_SUN_IS_AIMED* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag T_SUN_IS_AIMED_Decode(T_SUN_IS_AIMED* val, BitStream* pBitStrm, int* pErrCode);


typedef MYBOOL T_CONTROLLER_TO_BE_ACTIVATED;

#define T_CONTROLLER_TO_BE_ACTIVATED_REQUIRED_BYTES_FOR_ENCODING		1


void T_CONTROLLER_TO_BE_ACTIVATED_Initialize(T_CONTROLLER_TO_BE_ACTIVATED* pVal);
flag T_CONTROLLER_TO_BE_ACTIVATED_IsConstraintValid(T_CONTROLLER_TO_BE_ACTIVATED* val, int* pErrCode);
flag T_CONTROLLER_TO_BE_ACTIVATED_Encode(T_CONTROLLER_TO_BE_ACTIVATED* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag T_CONTROLLER_TO_BE_ACTIVATED_Decode(T_CONTROLLER_TO_BE_ACTIVATED* val, BitStream* pBitStrm, int* pErrCode);


typedef struct {
    T_THRUSTERS_OPENING thrusters_opening;
} T_CONTROL_UP_OUT;

#define T_CONTROL_UP_OUT_REQUIRED_BYTES_FOR_ENCODING		6


void T_CONTROL_UP_OUT_Initialize(T_CONTROL_UP_OUT* pVal);
flag T_CONTROL_UP_OUT_IsConstraintValid(T_CONTROL_UP_OUT* val, int* pErrCode);
flag T_CONTROL_UP_OUT_Encode(T_CONTROL_UP_OUT* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag T_CONTROL_UP_OUT_Decode(T_CONTROL_UP_OUT* val, BitStream* pBitStrm, int* pErrCode);


typedef struct {
    T_END_BOOST_IS_REACHED end_boost_is_reached;
    T_SUN_IS_AIMED sun_is_aimed;
} T_CONTROL_DOWN_OUT;

#define T_CONTROL_DOWN_OUT_REQUIRED_BYTES_FOR_ENCODING		1


void T_CONTROL_DOWN_OUT_Initialize(T_CONTROL_DOWN_OUT* pVal);
flag T_CONTROL_DOWN_OUT_IsConstraintValid(T_CONTROL_DOWN_OUT* val, int* pErrCode);
flag T_CONTROL_DOWN_OUT_Encode(T_CONTROL_DOWN_OUT* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag T_CONTROL_DOWN_OUT_Decode(T_CONTROL_DOWN_OUT* val, BitStream* pBitStrm, int* pErrCode);


typedef struct {
    asn1SccSint  int1;
    asn1SccSint  int2;
} IntegerPair;

#define IntegerPair_REQUIRED_BYTES_FOR_ENCODING		2

#define ERR_IntegerPair_int1		1097 /* (0..20) */
#define ERR_IntegerPair_int2		1098 /* (0..20) */

void IntegerPair_Initialize(IntegerPair* pVal);
flag IntegerPair_IsConstraintValid(IntegerPair* val, int* pErrCode);
flag IntegerPair_Encode(IntegerPair* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag IntegerPair_Decode(IntegerPair* val, BitStream* pBitStrm, int* pErrCode);


typedef struct {
    enum {
        T_FOR_SIMULINK_IN_NONE,	/* No components present */
        a_PRESENT,
        b_PRESENT
    } kind;
    union {
        IntegerPair a;
        IntegerPair b;
    } u;
} T_FOR_SIMULINK_IN;

#define T_FOR_SIMULINK_IN_REQUIRED_BYTES_FOR_ENCODING		2

#define ERR_T_FOR_SIMULINK_IN		1099 /*  */

void T_FOR_SIMULINK_IN_Initialize(T_FOR_SIMULINK_IN* pVal);
flag T_FOR_SIMULINK_IN_IsConstraintValid(T_FOR_SIMULINK_IN* val, int* pErrCode);
flag T_FOR_SIMULINK_IN_Encode(T_FOR_SIMULINK_IN* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag T_FOR_SIMULINK_IN_Decode(T_FOR_SIMULINK_IN* val, BitStream* pBitStrm, int* pErrCode);


typedef struct {
    enum {
        T_FOR_SIMULINK_OUT_NONE,	/* No components present */
        resultFromAddition_PRESENT,
        resultFromSubtraction_PRESENT
    } kind;
    union {
        asn1SccSint  resultFromAddition;
        asn1SccSint  resultFromSubtraction;
    } u;
} T_FOR_SIMULINK_OUT;

#define T_FOR_SIMULINK_OUT_REQUIRED_BYTES_FOR_ENCODING		1

#define ERR_T_FOR_SIMULINK_OUT		1100 /*  */
#define ERR_T_FOR_SIMULINK_OUT_resultFromAddition		1101 /* (0..40) */
#define ERR_T_FOR_SIMULINK_OUT_resultFromSubtraction		1102 /* (-20..20) */

void T_FOR_SIMULINK_OUT_Initialize(T_FOR_SIMULINK_OUT* pVal);
flag T_FOR_SIMULINK_OUT_IsConstraintValid(T_FOR_SIMULINK_OUT* val, int* pErrCode);
flag T_FOR_SIMULINK_OUT_Encode(T_FOR_SIMULINK_OUT* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag T_FOR_SIMULINK_OUT_Decode(T_FOR_SIMULINK_OUT* val, BitStream* pBitStrm, int* pErrCode);


typedef double MyTestPDU;

#define MyTestPDU_REQUIRED_BYTES_FOR_ENCODING		13


void MyTestPDU_Initialize(MyTestPDU* pVal);
flag MyTestPDU_IsConstraintValid(MyTestPDU* val, int* pErrCode);
flag MyTestPDU_Encode(MyTestPDU* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag MyTestPDU_Decode(MyTestPDU* val, BitStream* pBitStrm, int* pErrCode);


typedef struct {
    T_ON_OFF_CMD set_cam_cmd_pde1;
    T_ON_OFF_CMD set_cam_cmd_pde2;
    T_ON_OFF_CMD set_cam_cmd_pde3;
    T_ON_OFF_CMD set_cam_cmd_pde4;
} T_CAM_CMD;

#define T_CAM_CMD_REQUIRED_BYTES_FOR_ENCODING		1


void T_CAM_CMD_Initialize(T_CAM_CMD* pVal);
flag T_CAM_CMD_IsConstraintValid(T_CAM_CMD* val, int* pErrCode);
flag T_CAM_CMD_Encode(T_CAM_CMD* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag T_CAM_CMD_Decode(T_CAM_CMD* val, BitStream* pBitStrm, int* pErrCode);


typedef struct {
    T_REAL angular_rate_threshold;
    T_INTEGER rdv_phase;
    struct {
        long nCount;
        T_INTEGER arr[3];
    } boost_monitoring_opening_date;
    struct {
        long nCount;
        T_REAL arr[3];
    } boost_threshold_dvx;
    struct {
        long nCount;
        T_REAL arr[3];
    } boost_threshold_dvz;
    struct {
        long nCount;
        T_INTEGER arr[3];
    } boost_monitoring_duration;
    struct {
        long nCount;
        T_REAL arr[6];
    } acca_bias_estimation;
    T_REAL zm_threshold_initial;
    T_REAL zm_threshold_final;
    T_REAL mc_threshold_initial;
    T_REAL mc_threshold_final;
    T_REAL zm_initial;
    T_REAL zm_final;
    struct {
        long nCount;
        T_REAL arr[12];
    } r_r_rate_threshold_curve;
    struct {
        long nCount;
        T_REAL arr[3];
    } boost_intensities_dvx;
    struct {
        long nCount;
        T_REAL arr[3];
    } boost_intensities_dvz;
    T_VECTOR6 acca_lsb_value_acm;
    T_VECTOR6 acca_bias_estimate;
    T_VECTOR18 pseudo_inverse_acm;
    T_VECTOR4 tgm_window_size;
    T_VECTOR4 tgm_range_ref;
} T_CM_CONFIGURATION;

#define T_CM_CONFIGURATION_REQUIRED_BYTES_FOR_ENCODING		990

#define ERR_T_CM_CONFIGURATION_angular_rate_threshold		1103 /* (-10000..10000) */
#define ERR_T_CM_CONFIGURATION_rdv_phase		1104 /* (-1000..1000) */
#define ERR_T_CM_CONFIGURATION_boost_monitoring_opening_date		1105 /* (SIZE (0..3)) */
#define ERR_T_CM_CONFIGURATION_boost_monitoring_opening_date_elem		1106 /* (-1000..1000) */
#define ERR_T_CM_CONFIGURATION_boost_threshold_dvx		1107 /* (SIZE (0..3)) */
#define ERR_T_CM_CONFIGURATION_boost_threshold_dvx_elem		1108 /* (-10000..10000) */
#define ERR_T_CM_CONFIGURATION_boost_threshold_dvz		1109 /* (SIZE (0..3)) */
#define ERR_T_CM_CONFIGURATION_boost_threshold_dvz_elem		1110 /* (-10000..10000) */
#define ERR_T_CM_CONFIGURATION_boost_monitoring_duration		1111 /* (SIZE (0..3)) */
#define ERR_T_CM_CONFIGURATION_boost_monitoring_duration_elem		1112 /* (-1000..1000) */
#define ERR_T_CM_CONFIGURATION_acca_bias_estimation		1113 /* (SIZE (0..6)) */
#define ERR_T_CM_CONFIGURATION_acca_bias_estimation_elem		1114 /* (-10000..10000) */
#define ERR_T_CM_CONFIGURATION_zm_threshold_initial		1115 /* (-10000..10000) */
#define ERR_T_CM_CONFIGURATION_zm_threshold_final		1116 /* (-10000..10000) */
#define ERR_T_CM_CONFIGURATION_mc_threshold_initial		1117 /* (-10000..10000) */
#define ERR_T_CM_CONFIGURATION_mc_threshold_final		1118 /* (-10000..10000) */
#define ERR_T_CM_CONFIGURATION_zm_initial		1119 /* (-10000..10000) */
#define ERR_T_CM_CONFIGURATION_zm_final		1120 /* (-10000..10000) */
#define ERR_T_CM_CONFIGURATION_r_r_rate_threshold_curve		1121 /* (SIZE (0..12)) */
#define ERR_T_CM_CONFIGURATION_r_r_rate_threshold_curve_elem		1122 /* (-10000..10000) */
#define ERR_T_CM_CONFIGURATION_boost_intensities_dvx		1123 /* (SIZE (0..3)) */
#define ERR_T_CM_CONFIGURATION_boost_intensities_dvx_elem		1124 /* (-10000..10000) */
#define ERR_T_CM_CONFIGURATION_boost_intensities_dvz		1125 /* (SIZE (0..3)) */
#define ERR_T_CM_CONFIGURATION_boost_intensities_dvz_elem		1126 /* (-10000..10000) */
#define ERR_T_CM_CONFIGURATION_acca_lsb_value_acm		1127 /* (SIZE (0..6)) */
#define ERR_T_CM_CONFIGURATION_acca_bias_estimate		1128 /* (SIZE (0..6)) */
#define ERR_T_CM_CONFIGURATION_pseudo_inverse_acm		1129 /* (SIZE (0..18)) */
#define ERR_T_CM_CONFIGURATION_tgm_window_size		1130 /* (SIZE (0..4)) */
#define ERR_T_CM_CONFIGURATION_tgm_range_ref		1131 /* (SIZE (0..4)) */

void T_CM_CONFIGURATION_Initialize(T_CM_CONFIGURATION* pVal);
flag T_CM_CONFIGURATION_IsConstraintValid(T_CM_CONFIGURATION* val, int* pErrCode);
flag T_CM_CONFIGURATION_Encode(T_CM_CONFIGURATION* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag T_CM_CONFIGURATION_Decode(T_CM_CONFIGURATION* val, BitStream* pBitStrm, int* pErrCode);


typedef struct {
    T_MASS atv_mass;
    T_INERTIA inertia;
    T_VECTOR3 center_of_mass;
    T_INITIAL_EFFICIENCY_MATRIX initial_efficiency_matrix;
    T_EFFICIENCY_MATRIX inverse_efficiency_matrix;
    T_VELOCITY aimed_delta_v;
    T_QUATERNION q_lof_to_atv_cam_inst;
    T_QUATERNION q_j2000_to_atv_sasp_inst;
    T_REAL orbital_pulsation;
} T_CONTROLLER_CONFIG;

#define T_CONTROLLER_CONFIG_REQUIRED_BYTES_FOR_ENCODING		655

#define ERR_T_CONTROLLER_CONFIG_atv_mass		1132 /* (-10000..10000) */
#define ERR_T_CONTROLLER_CONFIG_inertia		1133 /* (SIZE (0..3)) */
#define ERR_T_CONTROLLER_CONFIG_center_of_mass		1134 /* (SIZE (0..3)) */
#define ERR_T_CONTROLLER_CONFIG_initial_efficiency_matrix		1135 /* (SIZE (0..6)) */
#define ERR_T_CONTROLLER_CONFIG_inverse_efficiency_matrix		1136 /* (SIZE (0..3)) */
#define ERR_T_CONTROLLER_CONFIG_aimed_delta_v		1137 /* (-10000..10000) */
#define ERR_T_CONTROLLER_CONFIG_q_lof_to_atv_cam_inst		1138 /* (SIZE (0..4)) */
#define ERR_T_CONTROLLER_CONFIG_q_j2000_to_atv_sasp_inst		1139 /* (SIZE (0..4)) */
#define ERR_T_CONTROLLER_CONFIG_orbital_pulsation		1140 /* (-10000..10000) */

void T_CONTROLLER_CONFIG_Initialize(T_CONTROLLER_CONFIG* pVal);
flag T_CONTROLLER_CONFIG_IsConstraintValid(T_CONTROLLER_CONFIG* val, int* pErrCode);
flag T_CONTROLLER_CONFIG_Encode(T_CONTROLLER_CONFIG* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag T_CONTROLLER_CONFIG_Decode(T_CONTROLLER_CONFIG* val, BitStream* pBitStrm, int* pErrCode);


typedef struct {
    T_MATRIX_3_4 inputa;
    T_MATRIX_3_4 inputb;
} T_CONTROLLER_FILTER_STATE;

#define T_CONTROLLER_FILTER_STATE_REQUIRED_BYTES_FOR_ENCODING		315

#define ERR_T_CONTROLLER_FILTER_STATE_inputa		1141 /* (SIZE (0..3)) */
#define ERR_T_CONTROLLER_FILTER_STATE_inputb		1142 /* (SIZE (0..3)) */

void T_CONTROLLER_FILTER_STATE_Initialize(T_CONTROLLER_FILTER_STATE* pVal);
flag T_CONTROLLER_FILTER_STATE_IsConstraintValid(T_CONTROLLER_FILTER_STATE* val, int* pErrCode);
flag T_CONTROLLER_FILTER_STATE_Encode(T_CONTROLLER_FILTER_STATE* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag T_CONTROLLER_FILTER_STATE_Decode(T_CONTROLLER_FILTER_STATE* val, BitStream* pBitStrm, int* pErrCode);


typedef struct {
    T_QUATERNION q_lof_to_atv;
    T_ANGULAR_RATE atv_abs_angular_rates;
    T_ACCELERATION atv_disruptive_acceleration;
} T_CONTROLLER_STATE;

#define T_CONTROLLER_STATE_REQUIRED_BYTES_FOR_ENCODING		96

#define ERR_T_CONTROLLER_STATE_q_lof_to_atv		1143 /* (SIZE (0..4)) */
#define ERR_T_CONTROLLER_STATE_atv_disruptive_acceleration		1144 /* (SIZE (0..3)) */

void T_CONTROLLER_STATE_Initialize(T_CONTROLLER_STATE* pVal);
flag T_CONTROLLER_STATE_IsConstraintValid(T_CONTROLLER_STATE* val, int* pErrCode);
flag T_CONTROLLER_STATE_Encode(T_CONTROLLER_STATE* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag T_CONTROLLER_STATE_Decode(T_CONTROLLER_STATE* val, BitStream* pBitStrm, int* pErrCode);


typedef struct {
    T_VELOCITY estimated_delta_v;
    T_THRUSTERS_OPENING thrusters_opening;
    T_REAL estimated_atv_quaternion_1;
    T_REAL estimated_atv_quaternion_2;
    T_REAL estimated_atv_quaternion_3;
} T_CONTROLLER_TELEMETRY;

#define T_CONTROLLER_TELEMETRY_REQUIRED_BYTES_FOR_ENCODING		58

#define ERR_T_CONTROLLER_TELEMETRY_estimated_delta_v		1145 /* (-10000..10000) */
#define ERR_T_CONTROLLER_TELEMETRY_estimated_atv_quaternion_1		1146 /* (-10000..10000) */
#define ERR_T_CONTROLLER_TELEMETRY_estimated_atv_quaternion_2		1147 /* (-10000..10000) */
#define ERR_T_CONTROLLER_TELEMETRY_estimated_atv_quaternion_3		1148 /* (-10000..10000) */

void T_CONTROLLER_TELEMETRY_Initialize(T_CONTROLLER_TELEMETRY* pVal);
flag T_CONTROLLER_TELEMETRY_IsConstraintValid(T_CONTROLLER_TELEMETRY* val, int* pErrCode);
flag T_CONTROLLER_TELEMETRY_Encode(T_CONTROLLER_TELEMETRY* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag T_CONTROLLER_TELEMETRY_Decode(T_CONTROLLER_TELEMETRY* val, BitStream* pBitStrm, int* pErrCode);


typedef struct {
    flag  power_sensor_enable;
    flag  output_sensor_enable;
    flag  flag_dtg1_power_enabled;
    flag  flag_dtg2_power_enabled;
    flag  flag_lcl_status_pde1;
    flag  flag_lcl_status_pde2;
    flag  flag_lcl_status_pde3;
    flag  flag_lcl_status_pde4;
    flag  flag_hlct_red_button_from_cpf1;
    flag  flag_hlct_red_button_from_cpf2;
    T_PFS_EWM_MSU_MSU_HS pfs_ewm_msuy_msux_hs;
    flag  flag_hltc_disarm_from_cpf1;
    flag  flag_hltc_disarm_from_cpf2;
    flag  flag_hltc_arm_from_cpf1;
    flag  flag_hltc_arm_from_cpf2;
    flag  flag_pde_power_sensor;
    flag  flag_aux_bat_sensor;
} T_HW_STATUSES;

#define T_HW_STATUSES_REQUIRED_BYTES_FOR_ENCODING		3


void T_HW_STATUSES_Initialize(T_HW_STATUSES* pVal);
flag T_HW_STATUSES_IsConstraintValid(T_HW_STATUSES* val, int* pErrCode);
flag T_HW_STATUSES_Encode(T_HW_STATUSES* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag T_HW_STATUSES_Decode(T_HW_STATUSES* val, BitStream* pBitStrm, int* pErrCode);


typedef struct {
    T_QUATERNION q_lof_to_atv_cam_inst;
    T_QUATERNION q_j2000_to_atv_sasp_inst;
    T_REAL orbital_pulsation;
    T_QUATERNION q_j2000_to_ocf;
    T_QUATERNION q_j2000_to_atv;
    T_VECTOR4 coarse_drift_msu;
    T_VECTOR4 fine_drift_msu;
    T_VECTOR8 dtg_lsb_value_msu;
    T_REAL dtg_fd_fine_threshold;
    T_REAL dtg_fd_coarse_threshold;
    T_VECTOR12 ssu_calib_data_msu;
    T_VECTOR9 true_ssu_axis_to_atv;
    T_VECTOR12 true_dtg_axis_to_atv_msu;
    T_VECTOR4 estimated_flight_drifts_config;
} T_NAVIGATION_CONFIGURATION;

#define T_NAVIGATION_CONFIGURATION_REQUIRED_BYTES_FOR_ENCODING		941

#define ERR_T_NAVIGATION_CONFIGURATION_q_lof_to_atv_cam_inst		1149 /* (SIZE (0..4)) */
#define ERR_T_NAVIGATION_CONFIGURATION_q_j2000_to_atv_sasp_inst		1150 /* (SIZE (0..4)) */
#define ERR_T_NAVIGATION_CONFIGURATION_orbital_pulsation		1151 /* (-10000..10000) */
#define ERR_T_NAVIGATION_CONFIGURATION_q_j2000_to_ocf		1152 /* (SIZE (0..4)) */
#define ERR_T_NAVIGATION_CONFIGURATION_q_j2000_to_atv		1153 /* (SIZE (0..4)) */
#define ERR_T_NAVIGATION_CONFIGURATION_coarse_drift_msu		1154 /* (SIZE (0..4)) */
#define ERR_T_NAVIGATION_CONFIGURATION_fine_drift_msu		1155 /* (SIZE (0..4)) */
#define ERR_T_NAVIGATION_CONFIGURATION_dtg_lsb_value_msu		1156 /* (SIZE (0..8)) */
#define ERR_T_NAVIGATION_CONFIGURATION_dtg_fd_fine_threshold		1157 /* (-10000..10000) */
#define ERR_T_NAVIGATION_CONFIGURATION_dtg_fd_coarse_threshold		1158 /* (-10000..10000) */
#define ERR_T_NAVIGATION_CONFIGURATION_ssu_calib_data_msu		1159 /* (SIZE (0..12)) */
#define ERR_T_NAVIGATION_CONFIGURATION_true_ssu_axis_to_atv		1160 /* (SIZE (0..9)) */
#define ERR_T_NAVIGATION_CONFIGURATION_true_dtg_axis_to_atv_msu		1161 /* (SIZE (0..12)) */
#define ERR_T_NAVIGATION_CONFIGURATION_estimated_flight_drifts_config		1162 /* (SIZE (0..4)) */

void T_NAVIGATION_CONFIGURATION_Initialize(T_NAVIGATION_CONFIGURATION* pVal);
flag T_NAVIGATION_CONFIGURATION_IsConstraintValid(T_NAVIGATION_CONFIGURATION* val, int* pErrCode);
flag T_NAVIGATION_CONFIGURATION_Encode(T_NAVIGATION_CONFIGURATION* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag T_NAVIGATION_CONFIGURATION_Decode(T_NAVIGATION_CONFIGURATION* val, BitStream* pBitStrm, int* pErrCode);


typedef struct {
    T_QUATERNION q_j2000_to_atv_nav;
    T_QUATERNION q_lof_to_atv_nav;
    T_ANGULAR_RATE atv_abs_ang_rate_nav;
} T_NAVIGATION_OUTPUT;

#define T_NAVIGATION_OUTPUT_REQUIRED_BYTES_FOR_ENCODING		109

#define ERR_T_NAVIGATION_OUTPUT_q_j2000_to_atv_nav		1163 /* (SIZE (0..4)) */
#define ERR_T_NAVIGATION_OUTPUT_q_lof_to_atv_nav		1164 /* (SIZE (0..4)) */

void T_NAVIGATION_OUTPUT_Initialize(T_NAVIGATION_OUTPUT* pVal);
flag T_NAVIGATION_OUTPUT_IsConstraintValid(T_NAVIGATION_OUTPUT* val, int* pErrCode);
flag T_NAVIGATION_OUTPUT_Encode(T_NAVIGATION_OUTPUT* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag T_NAVIGATION_OUTPUT_Decode(T_NAVIGATION_OUTPUT* val, BitStream* pBitStrm, int* pErrCode);


typedef struct {
    T_QUATERNION q_j2000_to_atv;
    T_QUATERNION q_lof_to_atv;
    T_QUATERNION q_j2000_to_atv_unconfir;
    T_QUATERNION q_lof_to_atv_unconfir;
} T_NAVIGATION_STATE;

#define T_NAVIGATION_STATE_REQUIRED_BYTES_FOR_ENCODING		210

#define ERR_T_NAVIGATION_STATE_q_j2000_to_atv		1165 /* (SIZE (0..4)) */
#define ERR_T_NAVIGATION_STATE_q_lof_to_atv		1166 /* (SIZE (0..4)) */
#define ERR_T_NAVIGATION_STATE_q_j2000_to_atv_unconfir		1167 /* (SIZE (0..4)) */
#define ERR_T_NAVIGATION_STATE_q_lof_to_atv_unconfir		1168 /* (SIZE (0..4)) */

void T_NAVIGATION_STATE_Initialize(T_NAVIGATION_STATE* pVal);
flag T_NAVIGATION_STATE_IsConstraintValid(T_NAVIGATION_STATE* val, int* pErrCode);
flag T_NAVIGATION_STATE_Encode(T_NAVIGATION_STATE* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag T_NAVIGATION_STATE_Decode(T_NAVIGATION_STATE* val, BitStream* pBitStrm, int* pErrCode);


typedef struct {
    flag  pfs_dtg_is_failed;
    T_ANGLE alpha_ssu;
    T_ANGLE beta_ssu;
    T_NAVIGATION_OUTPUT navigation_output;
} T_NAVIGATION_TELEMETRY;

#define T_NAVIGATION_TELEMETRY_REQUIRED_BYTES_FOR_ENCODING		135

#define ERR_T_NAVIGATION_TELEMETRY_alpha_ssu		1169 /* (-10000..10000) */
#define ERR_T_NAVIGATION_TELEMETRY_beta_ssu		1170 /* (-10000..10000) */

void T_NAVIGATION_TELEMETRY_Initialize(T_NAVIGATION_TELEMETRY* pVal);
flag T_NAVIGATION_TELEMETRY_IsConstraintValid(T_NAVIGATION_TELEMETRY* val, int* pErrCode);
flag T_NAVIGATION_TELEMETRY_Encode(T_NAVIGATION_TELEMETRY* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag T_NAVIGATION_TELEMETRY_Decode(T_NAVIGATION_TELEMETRY* val, BitStream* pBitStrm, int* pErrCode);


typedef struct {
    long nCount;
    INTEGER16 arr[32];
} T_PFS_BUS_DATA_BLOCK;

#define T_PFS_BUS_DATA_BLOCK_REQUIRED_BYTES_FOR_ENCODING		45

#define ERR_T_PFS_BUS_DATA_BLOCK		1171 /* (SIZE (0..32)) */
#define ERR_T_PFS_BUS_DATA_BLOCK_elem		1172 /* (-1000..1000) */

void T_PFS_BUS_DATA_BLOCK_Initialize(T_PFS_BUS_DATA_BLOCK* pVal);
flag T_PFS_BUS_DATA_BLOCK_IsConstraintValid(T_PFS_BUS_DATA_BLOCK* val, int* pErrCode);
flag T_PFS_BUS_DATA_BLOCK_Encode(T_PFS_BUS_DATA_BLOCK* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag T_PFS_BUS_DATA_BLOCK_Decode(T_PFS_BUS_DATA_BLOCK* val, BitStream* pBitStrm, int* pErrCode);


typedef struct {
    T_PFS_TGM_DATA pfs_tgm1_data;
    T_PFS_TGM_DATA pfs_tgm2_data;
    T_PFS_ACM_DATA pfs_acm1_data;
    T_PFS_ACM_DATA pfs_acm2_data;
    T_PFS_ACM_DATA pfs_acm3_data;
} T_PFS_BUS_SENSOR_DATA;

#define T_PFS_BUS_SENSOR_DATA_REQUIRED_BYTES_FOR_ENCODING		32


void T_PFS_BUS_SENSOR_DATA_Initialize(T_PFS_BUS_SENSOR_DATA* pVal);
flag T_PFS_BUS_SENSOR_DATA_IsConstraintValid(T_PFS_BUS_SENSOR_DATA* val, int* pErrCode);
flag T_PFS_BUS_SENSOR_DATA_Encode(T_PFS_BUS_SENSOR_DATA* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag T_PFS_BUS_SENSOR_DATA_Decode(T_PFS_BUS_SENSOR_DATA* val, BitStream* pBitStrm, int* pErrCode);


typedef struct {
    T_PFS_EWM_DTG_MSU_MODE dtg1_mode;
    T_PFS_EWM_DTG_MSU_MODE dtg2_mode;
} T_PFS_EWM_DTG12_MSU_MODE;

#define T_PFS_EWM_DTG12_MSU_MODE_REQUIRED_BYTES_FOR_ENCODING		1


void T_PFS_EWM_DTG12_MSU_MODE_Initialize(T_PFS_EWM_DTG12_MSU_MODE* pVal);
flag T_PFS_EWM_DTG12_MSU_MODE_IsConstraintValid(T_PFS_EWM_DTG12_MSU_MODE* val, int* pErrCode);
flag T_PFS_EWM_DTG12_MSU_MODE_Encode(T_PFS_EWM_DTG12_MSU_MODE* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag T_PFS_EWM_DTG12_MSU_MODE_Decode(T_PFS_EWM_DTG12_MSU_MODE* val, BitStream* pBitStrm, int* pErrCode);


typedef struct {
    T_PFS_EWM_DTG_MSU_MODE pfs_ewm_dtg_msu_mode;
    T_INTEGER pfs_ewm_dtg_msu_axis1;
    T_INTEGER pfs_ewm_dtg_msu_axis2;
} T_PFS_EWM_DTG_MSU;

#define T_PFS_EWM_DTG_MSU_REQUIRED_BYTES_FOR_ENCODING		3

#define ERR_T_PFS_EWM_DTG_MSU_pfs_ewm_dtg_msu_axis1		1173 /* (-1000..1000) */
#define ERR_T_PFS_EWM_DTG_MSU_pfs_ewm_dtg_msu_axis2		1174 /* (-1000..1000) */

void T_PFS_EWM_DTG_MSU_Initialize(T_PFS_EWM_DTG_MSU* pVal);
flag T_PFS_EWM_DTG_MSU_IsConstraintValid(T_PFS_EWM_DTG_MSU* val, int* pErrCode);
flag T_PFS_EWM_DTG_MSU_Encode(T_PFS_EWM_DTG_MSU* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag T_PFS_EWM_DTG_MSU_Decode(T_PFS_EWM_DTG_MSU* val, BitStream* pBitStrm, int* pErrCode);


typedef struct {
    T_VOLTAGE pfs_iwm_voltage_cpu;
    T_VOLTAGE pfs_iwm_voltage_pos;
    T_VOLTAGE pfs_iwm_voltage_neg;
    T_VOLTAGE pfs_iwm_voltage_bat;
    T_CURRENT pfs_ewm_current_ssu1;
    T_CURRENT pfs_ewm_current_ssu2;
    T_CURRENT pfs_ewm_current_ssu3;
    T_CURRENT pfs_ewm_current_ssu4;
    T_CURRENT pfs_iwm_current_pde1;
    T_CURRENT pfs_iwm_current_pde2;
    T_CURRENT pfs_iwm_current_pde3;
    T_CURRENT pfs_iwm_current_pde4;
    T_CURRENT pfs_iwm_current_prim;
    T_VOLTAGE pfs_iwm_voltage_prim;
    T_TEMP pfs_iwm_temp_msu;
    T_TEMP pfs_iwm_temp_gyro;
} T_PFS_IWM_MEASUREMENTS;

#define T_PFS_IWM_MEASUREMENTS_REQUIRED_BYTES_FOR_ENCODING		208

#define ERR_T_PFS_IWM_MEASUREMENTS_pfs_iwm_voltage_cpu		1175 /* (-10000..10000) */
#define ERR_T_PFS_IWM_MEASUREMENTS_pfs_iwm_voltage_pos		1176 /* (-10000..10000) */
#define ERR_T_PFS_IWM_MEASUREMENTS_pfs_iwm_voltage_neg		1177 /* (-10000..10000) */
#define ERR_T_PFS_IWM_MEASUREMENTS_pfs_iwm_voltage_bat		1178 /* (-10000..10000) */
#define ERR_T_PFS_IWM_MEASUREMENTS_pfs_ewm_current_ssu1		1179 /* (-10000..10000) */
#define ERR_T_PFS_IWM_MEASUREMENTS_pfs_ewm_current_ssu2		1180 /* (-10000..10000) */
#define ERR_T_PFS_IWM_MEASUREMENTS_pfs_ewm_current_ssu3		1181 /* (-10000..10000) */
#define ERR_T_PFS_IWM_MEASUREMENTS_pfs_ewm_current_ssu4		1182 /* (-10000..10000) */
#define ERR_T_PFS_IWM_MEASUREMENTS_pfs_iwm_current_pde1		1183 /* (-10000..10000) */
#define ERR_T_PFS_IWM_MEASUREMENTS_pfs_iwm_current_pde2		1184 /* (-10000..10000) */
#define ERR_T_PFS_IWM_MEASUREMENTS_pfs_iwm_current_pde3		1185 /* (-10000..10000) */
#define ERR_T_PFS_IWM_MEASUREMENTS_pfs_iwm_current_pde4		1186 /* (-10000..10000) */
#define ERR_T_PFS_IWM_MEASUREMENTS_pfs_iwm_current_prim		1187 /* (-10000..10000) */
#define ERR_T_PFS_IWM_MEASUREMENTS_pfs_iwm_voltage_prim		1188 /* (-10000..10000) */
#define ERR_T_PFS_IWM_MEASUREMENTS_pfs_iwm_temp_msu		1189 /* (-10000..10000) */
#define ERR_T_PFS_IWM_MEASUREMENTS_pfs_iwm_temp_gyro		1190 /* (-10000..10000) */

void T_PFS_IWM_MEASUREMENTS_Initialize(T_PFS_IWM_MEASUREMENTS* pVal);
flag T_PFS_IWM_MEASUREMENTS_IsConstraintValid(T_PFS_IWM_MEASUREMENTS* val, int* pErrCode);
flag T_PFS_IWM_MEASUREMENTS_Encode(T_PFS_IWM_MEASUREMENTS* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag T_PFS_IWM_MEASUREMENTS_Decode(T_PFS_IWM_MEASUREMENTS* val, BitStream* pBitStrm, int* pErrCode);


typedef struct {
    T_ON_OFF_CMD set_pfs_iwc_cam_trig1;
    T_CAM_CMD pfs_iwc_pde_cam_trig2;
    T_CAM_CMD pfs_ewc_msu_pde_cmd1;
    T_CAM_CMD pfs_ewc_msu_pde_cmd2;
} T_PDE_CMD_A;

#define T_PDE_CMD_A_REQUIRED_BYTES_FOR_ENCODING		4


void T_PDE_CMD_A_Initialize(T_PDE_CMD_A* pVal);
flag T_PDE_CMD_A_IsConstraintValid(T_PDE_CMD_A* val, int* pErrCode);
flag T_PDE_CMD_A_Encode(T_PDE_CMD_A* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag T_PDE_CMD_A_Decode(T_PDE_CMD_A* val, BitStream* pBitStrm, int* pErrCode);


typedef struct {
    flag  pfs_hltc_update_config_is_on;
    T_PFS_EC_UPDATE_CONF_MSU pfs_ec_update_config;
    flag  pfs_hltc_enable_cam_test2_is_on;
    flag  pfs_hltc_disable_cam_test2_on;
    flag  pfs_iwm_arming_relay_status_on;
    flag  pfs_hltc_red_button_is_on;
    /* angularData T-DTG-ANGULAR-INCREMENT, */
    struct {
            long nCount;
            byte arr[10];
        } aString;
    struct {
        long nCount;
        asn1SccSint  arr[3];
    } anArray;
    T_MSU_ID anEnum;
    T_FOR_SIMULINK_IN aChoice;
} T_HLTC_PLUS;

#define T_HLTC_PLUS_REQUIRED_BYTES_FOR_ENCODING		17

#define ERR_T_HLTC_PLUS_aString		1191 /* (SIZE (10)) */
#define ERR_T_HLTC_PLUS_anArray		1192 /* (SIZE (3..3)) */
#define ERR_T_HLTC_PLUS_anArray_elem		1193 /* (0..10) */

void T_HLTC_PLUS_Initialize(T_HLTC_PLUS* pVal);
flag T_HLTC_PLUS_IsConstraintValid(T_HLTC_PLUS* val, int* pErrCode);
flag T_HLTC_PLUS_Encode(T_HLTC_PLUS* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag T_HLTC_PLUS_Decode(T_HLTC_PLUS* val, BitStream* pBitStrm, int* pErrCode);


typedef struct {
    T_CAM_MODE cam_mode;
    T_CONTROLLER_TO_BE_ACTIVATED controller_to_be_activated;
    T_NAVIGATION_OUTPUT navigation_output;
} T_CONTROL_IN;

#define T_CONTROL_IN_REQUIRED_BYTES_FOR_ENCODING		110


void T_CONTROL_IN_Initialize(T_CONTROL_IN* pVal);
flag T_CONTROL_IN_IsConstraintValid(T_CONTROL_IN* val, int* pErrCode);
flag T_CONTROL_IN_Encode(T_CONTROL_IN* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag T_CONTROL_IN_Decode(T_CONTROL_IN* val, BitStream* pBitStrm, int* pErrCode);


typedef struct {
    T_PFS_BUS_DATA_BLOCK synchro_block;
    T_PFS_BUS_DATA_BLOCK tc_block1;
    T_PFS_BUS_DATA_BLOCK tc_block2;
    T_PFS_BUS_DATA_BLOCK tc_block3;
    T_PFS_BUS_DATA_BLOCK tc_block4;
    T_PFS_BUS_DATA_BLOCK tc_block5;
    T_PFS_BUS_DATA_BLOCK tc_block6;
    T_PFS_BUS_DATA_BLOCK tc_block7;
    T_PFS_BUS_DATA_BLOCK tc_block8;
    T_PFS_BUS_DATA_BLOCK tc_block9;
    T_PFS_BUS_DATA_BLOCK tc_block0;
    T_PFS_BUS_DATA_BLOCK acm_block;
    T_PFS_BUS_DATA_BLOCK tgm_block1;
} T_PFS_1BUS_DATA;

#define T_PFS_1BUS_DATA_REQUIRED_BYTES_FOR_ENCODING		582

#define ERR_T_PFS_1BUS_DATA_synchro_block		1194 /* (SIZE (0..32)) */
#define ERR_T_PFS_1BUS_DATA_tc_block1		1195 /* (SIZE (0..32)) */
#define ERR_T_PFS_1BUS_DATA_tc_block2		1196 /* (SIZE (0..32)) */
#define ERR_T_PFS_1BUS_DATA_tc_block3		1197 /* (SIZE (0..32)) */
#define ERR_T_PFS_1BUS_DATA_tc_block4		1198 /* (SIZE (0..32)) */
#define ERR_T_PFS_1BUS_DATA_tc_block5		1199 /* (SIZE (0..32)) */
#define ERR_T_PFS_1BUS_DATA_tc_block6		1200 /* (SIZE (0..32)) */
#define ERR_T_PFS_1BUS_DATA_tc_block7		1201 /* (SIZE (0..32)) */
#define ERR_T_PFS_1BUS_DATA_tc_block8		1202 /* (SIZE (0..32)) */
#define ERR_T_PFS_1BUS_DATA_tc_block9		1203 /* (SIZE (0..32)) */
#define ERR_T_PFS_1BUS_DATA_tc_block0		1204 /* (SIZE (0..32)) */
#define ERR_T_PFS_1BUS_DATA_acm_block		1205 /* (SIZE (0..32)) */
#define ERR_T_PFS_1BUS_DATA_tgm_block1		1206 /* (SIZE (0..32)) */

void T_PFS_1BUS_DATA_Initialize(T_PFS_1BUS_DATA* pVal);
flag T_PFS_1BUS_DATA_IsConstraintValid(T_PFS_1BUS_DATA* val, int* pErrCode);
flag T_PFS_1BUS_DATA_Encode(T_PFS_1BUS_DATA* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag T_PFS_1BUS_DATA_Decode(T_PFS_1BUS_DATA* val, BitStream* pBitStrm, int* pErrCode);


typedef struct {
    T_PFS_1BUS_DATA pfs_bus1_data;
    T_PFS_1BUS_DATA pfs_bus2_data;
    T_PFS_1BUS_DATA pfs_bus3_data;
    T_PFS_1BUS_DATA pfs_bus4_data;
} T_PFS_BUS_DATA;

#define T_PFS_BUS_DATA_REQUIRED_BYTES_FOR_ENCODING		2327


void T_PFS_BUS_DATA_Initialize(T_PFS_BUS_DATA* pVal);
flag T_PFS_BUS_DATA_IsConstraintValid(T_PFS_BUS_DATA* val, int* pErrCode);
flag T_PFS_BUS_DATA_Encode(T_PFS_BUS_DATA* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag T_PFS_BUS_DATA_Decode(T_PFS_BUS_DATA* val, BitStream* pBitStrm, int* pErrCode);


typedef struct {
    T_PFS_EWM_DTG_MSU pfs_ewm_dtg1_msu;
    T_PFS_EWM_DTG_MSU pfs_ewm_dtg2_msu;
} T_PFS_EWM_DTG12_MSU;

#define T_PFS_EWM_DTG12_MSU_REQUIRED_BYTES_FOR_ENCODING		6


void T_PFS_EWM_DTG12_MSU_Initialize(T_PFS_EWM_DTG12_MSU* pVal);
flag T_PFS_EWM_DTG12_MSU_IsConstraintValid(T_PFS_EWM_DTG12_MSU* val, int* pErrCode);
flag T_PFS_EWM_DTG12_MSU_Encode(T_PFS_EWM_DTG12_MSU* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag T_PFS_EWM_DTG12_MSU_Decode(T_PFS_EWM_DTG12_MSU* val, BitStream* pBitStrm, int* pErrCode);


typedef struct {
    flag  state_is_pfs_m_stdby;
    flag  state_is_pfs_m_ready_for_cam;
    flag  state_is_pfs_m_cam_in_waiting;
    flag  state_is_pfs_m_cam_prgs;
    flag  state_is_pfs_m_cam_inhib;
    flag  msu_failed_has_been_detected;
    T_CAM_MODE cam_mode;
    flag  cam_test2_is_enabled;
    flag  autocam_is_enabled;
    flag  first_config_has_been_received;
    T_CONFIGURATION_TABLE current_configuration_table;
    T_CONFIGURATION_TABLE buffered_configuration_table;
    T_MSU_STATUS msu_status;
    flag  msu_hs_is_ok;
    flag  pfs_iwm_arming_relay_status_on;
    T_NAVIGATION_TELEMETRY navigation_telemetry;
    T_CONTROLLER_TELEMETRY controller_telemetry;
    T_CM_TELEMETRY cm_telemetry;
    T_OBUT msu_obut;
    T_SYNCHRO_BROADCAST_STATUS synchro_broadcast_status;
    T_HW_STATUSES hw_statuses;
    T_SW_WARNING_CODE sw_warning_code;
    T_FTCP_HEALTH_STATUS ftcp_health_status;
    T_INTEGER bit_result;
    T_MSU_ID msu_id;
    flag  cm_auto_cam_cmd_is_requested;
    flag  cpu_overload_status;
    flag  pfs_ewm_ssu_msu_is_available;
    flag  controller_to_be_activated;
    flag  msu_online_bit_status_is_ok;
    T_PFS_EWM_DTG12_MSU pfs_ewm_dtg12_msu;
    flag  new_config_is_available;
    flag  new_config_is_confirmed;
    T_PFS_IWM_MEASUREMENTS pfs_iwm_measurements;
    T_POWER_CONSUMPTION power_consumption;
} T_MSU_TELEMETRY;

#define T_MSU_TELEMETRY_REQUIRED_BYTES_FOR_ENCODING		479

#define ERR_T_MSU_TELEMETRY_msu_obut		1207 /* (-1000..1000) */
#define ERR_T_MSU_TELEMETRY_synchro_broadcast_status		1208 /* (SIZE (0..4)) */
#define ERR_T_MSU_TELEMETRY_sw_warning_code		1209 /* (-1000..1000) */
#define ERR_T_MSU_TELEMETRY_bit_result		1210 /* (-1000..1000) */
#define ERR_T_MSU_TELEMETRY_power_consumption		1211 /* (-10000..10000) */

void T_MSU_TELEMETRY_Initialize(T_MSU_TELEMETRY* pVal);
flag T_MSU_TELEMETRY_IsConstraintValid(T_MSU_TELEMETRY* val, int* pErrCode);
flag T_MSU_TELEMETRY_Encode(T_MSU_TELEMETRY* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag T_MSU_TELEMETRY_Decode(T_MSU_TELEMETRY* val, BitStream* pBitStrm, int* pErrCode);


extern MyTestPDU testPDU;
#ifdef  __cplusplus
}
#define	ENUM_msu1	msu1
#define	ENUM_msu2	msu2
#define	ENUM_slave	slave
#define	ENUM_master	master
#define	ENUM_dtg_fine_mode	dtg_fine_mode
#define	ENUM_dtg_coarse_mode	dtg_coarse_mode
#define	CHOICE_a_PRESENT	T_FOR_SIMULINK_IN::a_PRESENT
#define	CHOICE_b_PRESENT	T_FOR_SIMULINK_IN::b_PRESENT
#define	CHOICE_resultFromAddition_PRESENT	T_FOR_SIMULINK_OUT::resultFromAddition_PRESENT
#define	CHOICE_resultFromSubtraction_PRESENT	T_FOR_SIMULINK_OUT::resultFromSubtraction_PRESENT
#endif

#endif
