#ifndef _INC_SAMPLE1_H
#define _INC_SAMPLE1_H
/*
Code automatically generated by asn1cc tool
*/

#include "asn1crt.h"

#ifdef  __cplusplus
extern "C" {
#endif

/*
Original definition by Alain
T-POS ::= BOOLEAN
*/
typedef enum {
    red = 0,
    green = 1,
    blue = 2
} TypeEnumerated;

#define TypeEnumerated_REQUIRED_BYTES_FOR_ENCODING		1


void TypeEnumerated_Initialize(TypeEnumerated* pVal);
flag TypeEnumerated_IsConstraintValid(TypeEnumerated* val, int* pErrCode);
flag TypeEnumerated_Encode(TypeEnumerated* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag TypeEnumerated_Decode(TypeEnumerated* val, BitStream* pBitStrm, int* pErrCode);


/* A more realistic definition */
typedef flag  T_POS2;

#define T_POS2_REQUIRED_BYTES_FOR_ENCODING		1


void T_POS2_Initialize(T_POS2* pVal);
flag T_POS2_IsConstraintValid(T_POS2* val, int* pErrCode);
flag T_POS2_Encode(T_POS2* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag T_POS2_Decode(T_POS2* val, BitStream* pBitStrm, int* pErrCode);


typedef struct {
    long nCount;
    asn1SccSint  arr[6];
} T_ARR;

#define T_ARR_REQUIRED_BYTES_FOR_ENCODING		3

#define ERR_T_ARR		1000 /* (SIZE (5..6)) */
#define ERR_T_ARR_elem		1001 /* (0..4) */

void T_ARR_Initialize(T_ARR* pVal);
flag T_ARR_IsConstraintValid(T_ARR* val, int* pErrCode);
flag T_ARR_Encode(T_ARR* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag T_ARR_Decode(T_ARR* val, BitStream* pBitStrm, int* pErrCode);


typedef flag  T_BOOL;

#define T_BOOL_REQUIRED_BYTES_FOR_ENCODING		1


void T_BOOL_Initialize(T_BOOL* pVal);
flag T_BOOL_IsConstraintValid(T_BOOL* val, int* pErrCode);
flag T_BOOL_Encode(T_BOOL* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag T_BOOL_Decode(T_BOOL* val, BitStream* pBitStrm, int* pErrCode);


typedef asn1SccSint  T_INT;

#define T_INT_REQUIRED_BYTES_FOR_ENCODING		1

#define ERR_T_INT		1002 /* (0..50) */

void T_INT_Initialize(T_INT* pVal);
flag T_INT_IsConstraintValid(T_INT* val, int* pErrCode);
flag T_INT_Encode(T_INT* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag T_INT_Decode(T_INT* val, BitStream* pBitStrm, int* pErrCode);


typedef double T_REAL;

#define T_REAL_REQUIRED_BYTES_FOR_ENCODING		13

#define ERR_T_REAL		1003 /* (-3.14..3.14) */

void T_REAL_Initialize(T_REAL* pVal);
flag T_REAL_IsConstraintValid(T_REAL* val, int* pErrCode);
flag T_REAL_Encode(T_REAL* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag T_REAL_Decode(T_REAL* val, BitStream* pBitStrm, int* pErrCode);


typedef struct {
        long nCount;
        byte arr[15];
    } T_STRING;

#define T_STRING_REQUIRED_BYTES_FOR_ENCODING		16

#define ERR_T_STRING		1004 /* (SIZE (1..15)) */

void T_STRING_Initialize(T_STRING* pVal);
flag T_STRING_IsConstraintValid(T_STRING* val, int* pErrCode);
flag T_STRING_Encode(T_STRING* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag T_STRING_Decode(T_STRING* val, BitStream* pBitStrm, int* pErrCode);


typedef struct {
    asn1SccSint  intVal;
    struct {
        long nCount;
        asn1SccSint  arr[10];
    } intArray;
    struct {
        long nCount;
        T_BOOL arr[10];
    } boolArray;
    TypeEnumerated enumValue;
    struct {
            long nCount;
            byte arr[40];
        } label;
    T_BOOL bAlpha;
    flag  bBeta;
    T_STRING sString;
    T_ARR arr;
} TypeNested;

#define TypeNested_REQUIRED_BYTES_FOR_ENCODING		65

#define ERR_TypeNested_intVal		1005 /* (0..10) */
#define ERR_TypeNested_intArray		1006 /* (SIZE (2..10)) */
#define ERR_TypeNested_intArray_elem		1007 /* (0..3) */
#define ERR_TypeNested_boolArray		1008 /* (SIZE (2..10)) */
#define ERR_TypeNested_label		1009 /* (SIZE (2..40)) */
#define ERR_TypeNested_sString		1010 /* (SIZE (1..15)) */
#define ERR_TypeNested_arr		1011 /* (SIZE (5..6)) */

void TypeNested_Initialize(TypeNested* pVal);
flag TypeNested_IsConstraintValid(TypeNested* val, int* pErrCode);
flag TypeNested_Encode(TypeNested* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag TypeNested_Decode(TypeNested* val, BitStream* pBitStrm, int* pErrCode);


typedef struct {
    double longitude;
    double latitude;
    double height;
    struct {
        long nCount;
        TypeNested arr[15];
    } subTypeArray;
} MyTestPDU;

#define MyTestPDU_REQUIRED_BYTES_FOR_ENCODING		1006

#define ERR_MyTestPDU_longitude		1012 /* (-180..180) */
#define ERR_MyTestPDU_latitude		1013 /* (-90..90) */
#define ERR_MyTestPDU_height		1014 /* (30000..45000) */
#define ERR_MyTestPDU_subTypeArray		1015 /* (SIZE (1..15)) */

void MyTestPDU_Initialize(MyTestPDU* pVal);
flag MyTestPDU_IsConstraintValid(MyTestPDU* val, int* pErrCode);
flag MyTestPDU_Encode(MyTestPDU* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag MyTestPDU_Decode(MyTestPDU* val, BitStream* pBitStrm, int* pErrCode);


extern MyTestPDU testPDU;
#ifdef  __cplusplus
}
#endif

#endif
